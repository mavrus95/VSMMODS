;#include "lcd_graph_lib.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include "font_6x8.h"
;
;#define PAGE0 0xb8
;#define PAGE1 0xb9
;#define PAGE2 0xba
;#define PAGE3 0xbb
;#define FLAG_BUSY  7
;
;#define SelectLeftChip()   SetBit(PORT_LCD_CON, CS)
;#define SelectRightChip()   ClearBit(PORT_LCD_CON, CS)
;
;volatile unsigned char method = 1;

	.DSEG
;volatile unsigned char flag = 0;
;
;//инициализация портов ввода/вывода
;void LCDG_InitPort(void)
; 0000 0012 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0013  PORT_LCD_BUS = 0xff;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0014  DDRX_LCD_BUS = 0xff;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0015  PORT_LCD_CON = 0xff;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0016  DDRX_LCD_CON = 0xff;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0017 }
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;
;//функция чтения флага занятости
;void LCDG_WaitFLAG_BUSY(void)
; 0000 001B {
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 001C   unsigned char stat;
; 0000 001D   DDRX_LCD_BUS = 0;                    //конфигурируем порт на вход
;PCODE: $0000001B VOL: 0
;	stat -> R17
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 001E   PORT_LCD_BUS = 0xff;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 001F   SetBit(PORT_LCD_CON, RD_WR);         //выставляем управляющие сигналы
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0020   ClearBit(PORT_LCD_CON, AO);
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0021   delay_us(2);
;PCODE: $00000024 VOL: 0
; 0000 0022   do{
;PCODE: $00000025 VOL: 0
; 0000 0023   ClearBit(PORT_LCD_CON, EN);
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0024   delay_us(5);
;PCODE: $00000028 VOL: 0
; 0000 0025   stat = PIN_LCD_BUS;                 //считываем статусный байт
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0026   delay_us(5);
;PCODE: $0000002B VOL: 0
; 0000 0027   SetBit(PORT_LCD_CON, EN);
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0028   }
; 0000 0029   while((stat & (1<<FLAG_BUSY)) != 0); //сидим в цикле пока не сбросится флаг
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 002A   DDRX_LCD_BUS = 0xff;                 //делаем порт снова выходом
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 002B   PORT_LCD_BUS = 0;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 002C }
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;
;//функция чтения байта данных из lcd
;unsigned char LCDG_ReadData(void)
; 0000 0030 {
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0031   unsigned char data;
; 0000 0032   DDRX_LCD_BUS = 0;                   //конфигурируем порт на вход
;PCODE: $0000003D VOL: 0
;	data -> R17
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0033   PORT_LCD_BUS = 0xff;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0034   SetBit(PORT_LCD_CON, RD_WR);
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0035   SetBit(PORT_LCD_CON, AO);
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0036   delay_us(2);
;PCODE: $00000046 VOL: 0
; 0000 0037   ClearBit(PORT_LCD_CON, EN);
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0038   delay_us(5);
;PCODE: $00000049 VOL: 0
; 0000 0039   data = PIN_LCD_BUS;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 003A   SetBit(PORT_LCD_CON, EN);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 003B   //делаем порт снова выходом
; 0000 003C   DDRX_LCD_BUS = 0xff;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 003D   PORT_LCD_BUS = 0;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 003E   return data;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 003F }
;PCODE: $00000055 VOL: 0
;
;//общая функция
;inline void LCDG_CommonFunc(unsigned char data)
; 0000 0043 {
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0044   ClearBit(PORT_LCD_CON, RD_WR);
;	data -> Y+0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0045   delay_us(2);
;PCODE: $0000005A VOL: 0
; 0000 0046   ClearBit(PORT_LCD_CON, EN);
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0047   PORT_LCD_BUS = data;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0048   delay_us(5);
;PCODE: $0000005F VOL: 0
; 0000 0049   SetBit(PORT_LCD_CON, EN);
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 004A }
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;
;//запись команды на lcd
;void LCDG_SendCom(unsigned char data)
; 0000 004E {
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 004F   LCDG_WaitFLAG_BUSY();
;	data -> Y+0
;PCODE: $00000067 VOL: 0
; 0000 0050   ClearBit(PORT_LCD_CON, AO);
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0051   LCDG_CommonFunc(data);
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0052 }
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;
;//вывод данных на lcd
;void LCDG_SendData(unsigned char data)
; 0000 0056 {
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0057   LCDG_WaitFLAG_BUSY();
;	data -> Y+0
;PCODE: $00000072 VOL: 0
; 0000 0058   SetBit(PORT_LCD_CON, AO);
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0059   LCDG_CommonFunc(data);
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 005A }
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;
;//функция инициализации lcd
;//подает сигнал сброса
;//настраивает правый и левый контроллеры
;void LCDG_InitLcd(void)
; 0000 0060 {
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0061   ClearBit(PORT_LCD_CON, RES);
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0062   delay_ms(400);
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0063   SetBit(PORT_LCD_CON, RES);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0064   delay_ms(400);
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0065 
; 0000 0066   SelectLeftChip();
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 0067   LCDG_SendCom(COM_CLEAR_RMW);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 0068   LCDG_SendCom(COM_STATIC_DRIVE_OFF);
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0069   LCDG_SendCom(COM_DUTY_SELECT_ON);
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 006A   LCDG_SendCom(COM_DISPLAY_ON);
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 006B   LCDG_SendCom(COM_ADC_SELECT_ON);
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 006C   LCDG_SendCom(COM_RESET);
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 006D   LCDG_SendCom(0xc0);
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 006E 
; 0000 006F   SelectRightChip();
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 0070   LCDG_SendCom(COM_CLEAR_RMW);
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0071   LCDG_SendCom(COM_STATIC_DRIVE_OFF);
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 0072   LCDG_SendCom(COM_DUTY_SELECT_ON);
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 0073   LCDG_SendCom(COM_DISPLAY_ON);
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 0074   LCDG_SendCom(COM_ADC_SELECT_OFF);
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 0075   LCDG_SendCom(COM_RESET);
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0076   LCDG_SendCom(0xc0);
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 0077 }
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;
;//функция очистки lcd
;void LCDG_ClearLcd(unsigned char x1, unsigned char x2)
; 0000 007B {
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 007C unsigned char xPos = x1;
; 0000 007D unsigned char realAdr = 0;
; 0000 007E 
; 0000 007F while(xPos < x2){
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;	x1 -> Y+3
;	x2 -> Y+2
;	xPos -> R17
;	realAdr -> R16
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 0080   if (realAdr < 61) {
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0081     SetBit(PORT_LCD_CON, CS);
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 0082     realAdr = realAdr + 19;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 0083   }
; 0000 0084   else {
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 0085     ClearBit(PORT_LCD_CON, CS);
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 0086     realAdr = realAdr - 61;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 0087   }
;PCODE: $000000D0 VOL: 0
; 0000 0088 
; 0000 0089   LCDG_SendCom(PAGE0);
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 008A   LCDG_SendCom(realAdr);
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 008B   LCDG_SendData(0);
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 008C   LCDG_SendCom(PAGE1);
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 008D   LCDG_SendCom(realAdr);
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 008E   LCDG_SendData(0);
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 008F   LCDG_SendCom(PAGE2);
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 0090   LCDG_SendCom(realAdr);
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 0091   LCDG_SendData(0);
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 0092   LCDG_SendCom(PAGE3);
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 0093   LCDG_SendCom(realAdr);
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 0094   LCDG_SendData(0);
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 0095 
; 0000 0096   xPos++;
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 0097   realAdr = xPos;
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 0098 }
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 0099 }
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;
;//установка метода вывода
;void LCDG_SetMethod(unsigned char met)
; 0000 009D {
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 009E   method = met;
;	met -> Y+0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 1
; 0000 009F }
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;
;//отображает один пиксел на экране
;void LCDG_PutPixel(unsigned char xPos, unsigned char yPos)
; 0000 00A3 {
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 00A4 unsigned char realAdr;
; 0000 00A5 unsigned char realPage;
; 0000 00A6 unsigned char data;
; 0000 00A7 unsigned char currentData;
; 0000 00A8 
; 0000 00A9   if ((xPos > 122) || (yPos > 31)) return;
;PCODE: $00000107 VOL: 0
;	xPos -> Y+5
;	yPos -> Y+4
;	realAdr -> R17
;	realPage -> R16
;	data -> R19
;	currentData -> R18
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 00AA 
; 0000 00AB   realAdr = xPos;
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 00AC   realPage = PAGE0 + (yPos/8);
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 00AD   data = yPos%8;
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 00AE 
; 0000 00AF   if (realAdr < 61) {
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 00B0     SetBit(PORT_LCD_CON, CS);
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 00B1     realAdr = realAdr + 19;
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 00B2   }
; 0000 00B3   else {
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 00B4     ClearBit(PORT_LCD_CON, CS);
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 00B5     realAdr = realAdr - 61;
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 00B6   }
;PCODE: $0000012A VOL: 0
; 0000 00B7   LCDG_WaitFLAG_BUSY();
;PCODE: $0000012B VOL: 0
; 0000 00B8   LCDG_SendCom(realPage);
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 00B9   LCDG_SendCom(realAdr);
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 00BA   LCDG_ReadData();
;PCODE: $00000130 VOL: 0
; 0000 00BB   currentData = LCDG_ReadData();
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 00BC    switch(method){
;PCODE: $00000133 VOL: 1
; 0000 00BD     case MET_AND: {currentData &= ~(1<<data); break;}
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 00BE     case MET_OR : {currentData |= (1<<data); break;}
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 00BF     case MET_XOR : {currentData ^= (1<<data); break;}
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 00C0    }
;PCODE: $0000014F VOL: 0
; 0000 00C1   LCDG_SendCom(realAdr);
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 00C2   LCDG_SendData(currentData);
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 00C3 }
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;
;
;
;
;//Знакогенератор____________________________________________________________________________
;
;//устанавливает флаг инверсии
;void LCDG_SetInv(unsigned char f)
; 0000 00CC {
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 00CD   flag = f;
;	f -> Y+0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 1
; 0000 00CE }
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;
;//отображает один символ на жкд
;//unsigned char PlaceArray[] = {0,8,16,24,32,40,48,56,64,72,80,88,96,104,112};
;//unsigned char PlaceArray[] = {0,7,14,21,28,35,42,49,56,63,70,77,84,91,98,105,112};
;unsigned char PlaceArray[] = {0,6,12,18,24,30,36,42,48,54,60,66,72,78,84,90,96,102,108,114};

	.DSEG
;
;void LCDG_SendSymbol(unsigned char xPos, unsigned char yPos,unsigned char data)
; 0000 00D6 {

	.CSEG
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 00D7 unsigned char i;
; 0000 00D8 unsigned char realAdr;
; 0000 00D9 unsigned char realPage = PAGE3 - yPos;
; 0000 00DA unsigned int  pointerFont = ((unsigned int)data<<2) + ((unsigned int)data<<1);
; 0000 00DB realAdr = PlaceArray[xPos];
;PCODE: $00000161 VOL: 0
;	xPos -> Y+8
;	yPos -> Y+7
;	data -> Y+6
;	i -> R17
;	realAdr -> R16
;	realPage -> R19
;	pointerFont -> R20,R21
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 00DC xPos = realAdr;
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 00DD 
; 0000 00DE   for(i = 0; i<=5; i++){
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 00DF      if (realAdr < 61) {
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 00E0       SetBit(PORT_LCD_CON, CS);
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 00E1       realAdr = realAdr + 19;
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 00E2     }
; 0000 00E3     else {
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 00E4       ClearBit(PORT_LCD_CON, CS);
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 00E5       realAdr = realAdr - 61;
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 00E6     }
;PCODE: $0000018B VOL: 0
; 0000 00E7 
; 0000 00E8     data = font_6x8_Data[pointerFont];
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 00E9     if(flag) data = ~data;
;PCODE: $00000190 VOL: 1
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 00EA     LCDG_SendCom(realPage);
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 00EB     LCDG_SendCom(realAdr);
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 00EC     LCDG_SendData(data);
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 00ED     xPos++;
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 00EE     realAdr = xPos;
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0000 00EF     pointerFont++;
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0000 00F0   }
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0000 00F1 }
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;
;//отображает строку на жкд
;void LCDG_SendString(unsigned char xPos, unsigned char yPos, char * string)
; 0000 00F5 {
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0000 00F6   unsigned char data = 0;
; 0000 00F7   while(*string){
;PCODE: $000001B0 VOL: 0
;	xPos -> Y+4
;	yPos -> Y+3
;	*string -> Y+1
;	data -> R17
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
; 0000 00F8     data = *string++;
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
; 0000 00F9     LCDG_SendSymbol(xPos,yPos,data);
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0000 00FA     xPos++;
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0000 00FB   }
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0000 00FC }
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;
;
;
;/****************************************************************************/
;/*  Функция вывода прямой по алгоритму Брезенхема                           */
;/****************************************************************************/
;void LCDG_DrawLine(unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2)
; 0000 0104 {
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0000 0105         int dx, dy, i1, i2, i, kx, ky;
; 0000 0106         int d;
; 0000 0107         int x, y;
; 0000 0108         int flag;
; 0000 0109 
; 0000 010A         dy = y2 - y1;
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;	x1 -> Y+25
;	y1 -> Y+24
;	x2 -> Y+23
;	y2 -> Y+22
;	dx -> R16,R17
;	dy -> R18,R19
;	i1 -> R20,R21
;	i2 -> Y+20
;	i -> Y+18
;	kx -> Y+16
;	ky -> Y+14
;	d -> Y+12
;	x -> Y+10
;	y -> Y+8
;	flag -> Y+6
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
; 0000 010B         dx = x2 - x1;
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0000 010C         if (dx == 0 && dy == 0){
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0000 010D                 LCDG_PutPixel(x1,y1);
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0000 010E                 return;
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0000 010F         }
; 0000 0110         kx = 1;
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0000 0111         ky = 1;
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0000 0112 
; 0000 0113         if( dx < 0 ){ dx = -dx; kx = -1; }
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
; 0000 0114         else if(dx == 0)        kx = 0;
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
; 0000 0115 
; 0000 0116         if(dy < 0) { dy = -dy; ky = -1; }
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
; 0000 0117 
; 0000 0118         if(dx < dy){ flag = 0; d = dx; dx = dy; dy = d; }
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0000 0119         else         flag = 1;
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
; 0000 011A 
; 0000 011B         i1 = dy + dy; d = i1 - dx; i2 = d - dx;
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
; 0000 011C         x = x1; y = y1;
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
; 0000 011D 
; 0000 011E         for(i=0; i < dx; i++){
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
; 0000 011F                 LCDG_PutPixel(x,y);
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
; 0000 0120 
; 0000 0121                 if(flag) x += kx;
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
; 0000 0122                 else     y += ky;
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
; 0000 0123 
; 0000 0124                 if( d < 0 )
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
; 0000 0125                          d += i1;
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
; 0000 0126                 else{
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
; 0000 0127                          d += i2;
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
; 0000 0128                          if(flag) y += ky;
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
; 0000 0129                          else     x += kx;
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
; 0000 012A                 }
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
; 0000 012B         }
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
; 0000 012C         LCDG_PutPixel(x,y);
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
; 0000 012D }
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;
;
;/****************************************************************************/
;/*  Функция вывода круга                                                    */
;/****************************************************************************/
;void LCDG_DrawCircle(unsigned char xc,unsigned char yc,unsigned char r)
; 0000 0134 {
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
; 0000 0135   int  x,y,d;
; 0000 0136   y = r;
;PCODE: $0000026E VOL: 0
;	xc -> Y+8
;	yc -> Y+7
;	r -> Y+6
;	x -> R16,R17
;	y -> R18,R19
;	d -> R20,R21
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
; 0000 0137   d = 3-((int)r<<1);
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
; 0000 0138   x = 0;
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
; 0000 0139 
; 0000 013A   while(x <= y)
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
; 0000 013B   {
; 0000 013C   LCDG_PutPixel(x+xc,y+yc);
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
; 0000 013D   LCDG_PutPixel(x+xc,-y+yc);
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
; 0000 013E   LCDG_PutPixel(-x+xc,-y+yc);
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
; 0000 013F   LCDG_PutPixel(-x+xc,y+yc);
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
; 0000 0140   LCDG_PutPixel(y+xc,x+yc);
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
; 0000 0141   LCDG_PutPixel(y+xc,-x+yc);
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
; 0000 0142   LCDG_PutPixel(-y+xc,-x+yc);
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
; 0000 0143   LCDG_PutPixel(-y+xc,x+yc);
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
; 0000 0144   if (d<0) {
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
; 0000 0145     d = d+4*x+6;
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
; 0000 0146   } else {
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
; 0000 0147    d = d+4*(x-y)+10;
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
; 0000 0148    y--;
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
; 0000 0149   }
;PCODE: $000002D7 VOL: 0
; 0000 014A   x++;
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
; 0000 014B   };
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
; 0000 014C 
; 0000 014D }
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;
;/****************************************************************************/
;/*  Функция рисования прямоугольника                                        */
;/****************************************************************************/
;void LCDG_DrawRect(unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2, unsigned char fill)
; 0000 0153 {
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
; 0000 0154   LCDG_DrawLine(x1, y1, x2, y1);
;	x1 -> Y+4
;	y1 -> Y+3
;	x2 -> Y+2
;	y2 -> Y+1
;	fill -> Y+0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
; 0000 0155   LCDG_DrawLine(x1, y2, x2, y2);
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
; 0000 0156   LCDG_DrawLine(x1, (y1+1), x1, (y2-1));
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
; 0000 0157   LCDG_DrawLine(x2, (y1+1), x2, (y2-1));
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
; 0000 0158   if (fill){
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
; 0000 0159     while(x1<x2){
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
; 0000 015A       x1++;
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
; 0000 015B       LCDG_DrawLine(x1, (y1+1), x1, (y2-1));
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
; 0000 015C     }
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
; 0000 015D 
; 0000 015E   }
; 0000 015F }
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
