
#pragma used+
sfrb TWBR=0;
sfrb TWSR=1;
sfrb TWAR=2;
sfrb TWDR=3;
sfrb ADCL=4;
sfrb ADCH=5;
sfrw ADCW=4;      
sfrb ADCSRA=6;
sfrb ADMUX=7;
sfrb ACSR=8;
sfrb UBRRL=9;
sfrb UCSRB=0xa;
sfrb UCSRA=0xb;
sfrb UDR=0xc;
sfrb SPCR=0xd;
sfrb SPSR=0xe;
sfrb SPDR=0xf;
sfrb PIND=0x10;
sfrb DDRD=0x11;
sfrb PORTD=0x12;
sfrb PINC=0x13;
sfrb DDRC=0x14;
sfrb PORTC=0x15;
sfrb PINB=0x16;
sfrb DDRB=0x17;
sfrb PORTB=0x18;
sfrb PINA=0x19;
sfrb DDRA=0x1a;
sfrb PORTA=0x1b;
sfrb EECR=0x1c;
sfrb EEDR=0x1d;
sfrb EEARL=0x1e;
sfrb EEARH=0x1f;
sfrw EEAR=0x1e;   
sfrb UBRRH=0x20;
sfrb UCSRC=0X20;
sfrb WDTCR=0x21;
sfrb ASSR=0x22;
sfrb OCR2=0x23;
sfrb TCNT2=0x24;
sfrb TCCR2=0x25;
sfrb ICR1L=0x26;
sfrb ICR1H=0x27;
sfrb OCR1BL=0x28;
sfrb OCR1BH=0x29;
sfrw OCR1B=0x28;  
sfrb OCR1AL=0x2a;
sfrb OCR1AH=0x2b;
sfrw OCR1A=0x2a;  
sfrb TCNT1L=0x2c;
sfrb TCNT1H=0x2d;
sfrw TCNT1=0x2c;  
sfrb TCCR1B=0x2e;
sfrb TCCR1A=0x2f;
sfrb SFIOR=0x30;
sfrb OSCCAL=0x31;
sfrb OCDR=0x31;
sfrb TCNT0=0x32;
sfrb TCCR0=0x33;
sfrb MCUCSR=0x34;
sfrb MCUCR=0x35;
sfrb TWCR=0x36;
sfrb SPMCR=0x37;
sfrb TIFR=0x38;
sfrb TIMSK=0x39;
sfrb GIFR=0x3a;
sfrb GICR=0x3b;
sfrb OCR0=0X3c;
sfrb SPL=0x3d;
sfrb SPH=0x3e;
sfrb SREG=0x3f;
#pragma used-

#asm
	#ifndef __SLEEP_DEFINED__
	#define __SLEEP_DEFINED__
	.EQU __se_bit=0x40
	.EQU __sm_mask=0xB0
	.EQU __sm_powerdown=0x20
	.EQU __sm_powersave=0x30
	.EQU __sm_standby=0xA0
	.EQU __sm_ext_standby=0xB0
	.EQU __sm_adc_noise_red=0x10
	.SET power_ctrl_reg=mcucr
	#endif
#endasm

#pragma used+

void delay_us(unsigned int n);
void delay_ms(unsigned int n);

#pragma used-

unsigned char LCDG_ReadData(void);
void LCDG_SendCom(unsigned char data);
void LCDG_SendData(unsigned char data);

void LCDG_InitPort(void);
void LCDG_InitLcd(void);
void LCDG_ClearLcd(unsigned char x1, unsigned char x2);

void LCDG_SetInv(unsigned char f);
void LCDG_SendSymbol(unsigned char xPos, unsigned char yPos, unsigned char data);
void LCDG_SendString(unsigned char xPos, unsigned char yPos, char * string);

void LCDG_SetMethod(unsigned char met);
void LCDG_PutPixel(unsigned char xPos, unsigned char yPos);
void LCDG_DrawLine(unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2);
void LCDG_DrawCircle(unsigned char xc,unsigned char yc,unsigned char r);
void LCDG_DrawRect(unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2, unsigned char fill);

__flash unsigned char font_6x8_Data[] =
{

0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

0x00, 0x3e, 0x45, 0x51, 0x45, 0x3e,

0x00, 0x3e, 0x6b, 0x6f, 0x6b, 0x3e,

0x00, 0x1c, 0x3e, 0x7c, 0x3e, 0x1c,

0x00, 0x18, 0x3c, 0x7e, 0x3c, 0x18,

0x00, 0x30, 0x36, 0x7f, 0x36, 0x30,

0x00, 0x18, 0x5c, 0x7e, 0x5c, 0x18,

0x00, 0x00, 0x18, 0x18, 0x00, 0x00,

0xff, 0xff, 0xe7, 0xe7, 0xff, 0xff,

0x00, 0x3c, 0x24, 0x24, 0x3c, 0x00,

0xff, 0xc3, 0xdb, 0xdb, 0xc3, 0xff,

0x00, 0x30, 0x48, 0x4a, 0x36, 0x0e,

0x00, 0x06, 0x29, 0x79, 0x29, 0x06,

0x00, 0x60, 0x70, 0x3f, 0x02, 0x04,

0x00, 0x60, 0x7e, 0x0a, 0x35, 0x3f,

0x00, 0x2a, 0x1c, 0x36, 0x1c, 0x2a,

0x00, 0x00, 0x7f, 0x3e, 0x1c, 0x08,

0x00, 0x08, 0x1c, 0x3e, 0x7f, 0x00,

0x00, 0x14, 0x36, 0x7f, 0x36, 0x14,

0x00, 0x00, 0x5f, 0x00, 0x5f, 0x00,

0x00, 0x06, 0x09, 0x7f, 0x01, 0x7f,

0x00, 0x22, 0x4d, 0x55, 0x59, 0x22,

0x00, 0x60, 0x60, 0x60, 0x60, 0x00,

0x00, 0x14, 0xb6, 0xff, 0xb6, 0x14,

0x00, 0x04, 0x06, 0x7f, 0x06, 0x04,

0x00, 0x10, 0x30, 0x7f, 0x30, 0x10,

0x00, 0x08, 0x08, 0x3e, 0x1c, 0x08,

0x00, 0x08, 0x1c, 0x3e, 0x08, 0x08,

0x00, 0x78, 0x40, 0x40, 0x40, 0x40,

0x00, 0x08, 0x3e, 0x08, 0x3e, 0x08,

0x00, 0x30, 0x3c, 0x3f, 0x3c, 0x30,

0x00, 0x03, 0x0f, 0x3f, 0x0f, 0x03,

0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

0x00, 0x00, 0x06, 0x5f, 0x06, 0x00,

0x00, 0x07, 0x03, 0x00, 0x07, 0x03,

0x00, 0x24, 0x7e, 0x24, 0x7e, 0x24,

0x00, 0x24, 0x2b, 0x6a, 0x12, 0x00,

0x00, 0x63, 0x13, 0x08, 0x64, 0x63,

0x00, 0x36, 0x49, 0x56, 0x20, 0x50,

0x00, 0x00, 0x07, 0x03, 0x00, 0x00,

0x00, 0x00, 0x3e, 0x41, 0x00, 0x00,

0x00, 0x00, 0x41, 0x3e, 0x00, 0x00,

0x00, 0x08, 0x3e, 0x1c, 0x3e, 0x08,

0x00, 0x08, 0x08, 0x3e, 0x08, 0x08,

0x00, 0x00, 0xe0, 0x60, 0x00, 0x00,

0x00, 0x08, 0x08, 0x08, 0x08, 0x08,

0x00, 0x00, 0x60, 0x60, 0x00, 0x00,

0x00, 0x20, 0x10, 0x08, 0x04, 0x02,

0x00, 0x3e, 0x41, 0x41, 0x41, 0x3e,

0x00, 0x00, 0x42, 0x7f, 0x40, 0x00,

0x00, 0x62, 0x51, 0x49, 0x49, 0x46,

0x00, 0x22, 0x49, 0x49, 0x49, 0x36,

0x00, 0x18, 0x14, 0x12, 0x7f, 0x10,

0x00, 0x2f, 0x49, 0x49, 0x49, 0x31,

0x00, 0x3c, 0x4a, 0x49, 0x49, 0x30,

0x00, 0x01, 0x71, 0x09, 0x05, 0x03,

0x00, 0x36, 0x49, 0x49, 0x49, 0x36,

0x00, 0x06, 0x49, 0x49, 0x29, 0x1e,

0x00, 0x00, 0x6c, 0x6c, 0x00, 0x00,

0x00, 0x00, 0xec, 0x6c, 0x00, 0x00,

0x00, 0x08, 0x14, 0x22, 0x41, 0x00,

0x00, 0x24, 0x24, 0x24, 0x24, 0x24,

0x00, 0x00, 0x41, 0x22, 0x14, 0x08,

0x00, 0x02, 0x01, 0x59, 0x09, 0x06,

0x00, 0x3e, 0x41, 0x5d, 0x55, 0x1e,

0x00, 0x7e, 0x11, 0x11, 0x11, 0x7e,

0x00, 0x7f, 0x49, 0x49, 0x49, 0x36,

0x00, 0x3e, 0x41, 0x41, 0x41, 0x22,

0x00, 0x7f, 0x41, 0x41, 0x41, 0x3e,

0x00, 0x7f, 0x49, 0x49, 0x49, 0x41,

0x00, 0x7f, 0x09, 0x09, 0x09, 0x01,

0x00, 0x3e, 0x41, 0x49, 0x49, 0x7a,

0x00, 0x7f, 0x08, 0x08, 0x08, 0x7f,

0x00, 0x00, 0x41, 0x7f, 0x41, 0x00,

0x00, 0x30, 0x40, 0x40, 0x40, 0x3f,

0x00, 0x7f, 0x08, 0x14, 0x22, 0x41,

0x00, 0x7f, 0x40, 0x40, 0x40, 0x40,

0x00, 0x7f, 0x02, 0x04, 0x02, 0x7f,

0x00, 0x7f, 0x02, 0x04, 0x08, 0x7f,

0x00, 0x3e, 0x41, 0x41, 0x41, 0x3e,

0x00, 0x7f, 0x09, 0x09, 0x09, 0x06,

0x00, 0x3e, 0x41, 0x51, 0x21, 0x5e,

0x00, 0x7f, 0x09, 0x09, 0x19, 0x66,

0x00, 0x26, 0x49, 0x49, 0x49, 0x32,

0x00, 0x01, 0x01, 0x7f, 0x01, 0x01,

0x00, 0x3f, 0x40, 0x40, 0x40, 0x3f,

0x00, 0x1f, 0x20, 0x40, 0x20, 0x1f,

0x00, 0x3f, 0x40, 0x3c, 0x40, 0x3f,

0x00, 0x63, 0x14, 0x08, 0x14, 0x63,

0x00, 0x07, 0x08, 0x70, 0x08, 0x07,

0x00, 0x71, 0x49, 0x45, 0x43, 0x00,

0x00, 0x00, 0x7f, 0x41, 0x41, 0x00,

0x00, 0x02, 0x04, 0x08, 0x10, 0x20,

0x00, 0x00, 0x41, 0x41, 0x7f, 0x00,

0x00, 0x04, 0x02, 0x01, 0x02, 0x04,

0x80, 0x80, 0x80, 0x80, 0x80, 0x80,

0x00, 0x00, 0x03, 0x07, 0x00, 0x00,

0x00, 0x20, 0x54, 0x54, 0x54, 0x78,

0x00, 0x7f, 0x44, 0x44, 0x44, 0x38,

0x00, 0x38, 0x44, 0x44, 0x44, 0x28,

0x00, 0x38, 0x44, 0x44, 0x44, 0x7f,

0x00, 0x38, 0x54, 0x54, 0x54, 0x08,

0x00, 0x08, 0x7e, 0x09, 0x09, 0x00,

0x00, 0x18, 0xa4, 0xa4, 0xa4, 0x7c,

0x00, 0x7f, 0x04, 0x04, 0x78, 0x00,

0x00, 0x00, 0x00, 0x7d, 0x40, 0x00,

0x00, 0x40, 0x80, 0x84, 0x7d, 0x00,

0x00, 0x7f, 0x10, 0x28, 0x44, 0x00,

0x00, 0x00, 0x00, 0x7f, 0x40, 0x00,

0x00, 0x7c, 0x04, 0x18, 0x04, 0x78,

0x00, 0x7c, 0x04, 0x04, 0x78, 0x00,

0x00, 0x38, 0x44, 0x44, 0x44, 0x38,

0x00, 0xfc, 0x44, 0x44, 0x44, 0x38,

0x00, 0x38, 0x44, 0x44, 0x44, 0xfc,

0x00, 0x44, 0x78, 0x44, 0x04, 0x08,

0x00, 0x08, 0x54, 0x54, 0x54, 0x20,

0x00, 0x04, 0x3e, 0x44, 0x24, 0x00,

0x00, 0x3c, 0x40, 0x20, 0x7c, 0x00,

0x00, 0x1c, 0x20, 0x40, 0x20, 0x1c,

0x00, 0x3c, 0x60, 0x30, 0x60, 0x3c,

0x00, 0x6c, 0x10, 0x10, 0x6c, 0x00,

0x00, 0x9c, 0xa0, 0x60, 0x3c, 0x00,

0x00, 0x64, 0x54, 0x54, 0x4c, 0x00,

0x00, 0x08, 0x3e, 0x41, 0x41, 0x00,

0x00, 0x00, 0x00, 0x77, 0x00, 0x00,

0x00, 0x00, 0x41, 0x41, 0x3e, 0x08,

0x00, 0x02, 0x01, 0x02, 0x01, 0x00,

0x00, 0x3c, 0x26, 0x23, 0x26, 0x3c,

0x44, 0x11, 0x44, 0x11, 0x44, 0x11,

0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55,

0xbb, 0xee, 0xbb, 0xee, 0xbb, 0xee,

0x00, 0x00, 0x00, 0xff, 0x00, 0x00,

0x08, 0x08, 0x08, 0xff, 0x00, 0x00,

0x0a, 0x0a, 0x0a, 0xff, 0x00, 0x00,

0x08, 0xff, 0x00, 0xff, 0x00, 0x00,

0x08, 0xf8, 0x08, 0xf8, 0x00, 0x00,

0x0a, 0x0a, 0x0a, 0xfe, 0x00, 0x00,

0x0a, 0xfb, 0x00, 0xff, 0x00, 0x00,

0x00, 0xff, 0x00, 0xff, 0x00, 0x00,

0x0a, 0xfa, 0x02, 0xfe, 0x00, 0x00,

0x0a, 0x0b, 0x08, 0x0f, 0x00, 0x00,

0x08, 0x0f, 0x08, 0x0f, 0x00, 0x00,

0x0a, 0x0a, 0x0a, 0x0f, 0x00, 0x00,

0x08, 0x08, 0x08, 0xf8, 0x00, 0x00,

0x00, 0x00, 0x00, 0x0f, 0x08, 0x08,

0x08, 0x08, 0x08, 0x0f, 0x08, 0x08,

0x08, 0x08, 0x08, 0xf8, 0x08, 0x08,

0x00, 0x00, 0x00, 0xff, 0x08, 0x08,

0x08, 0x08, 0x08, 0x08, 0x08, 0x08,

0x08, 0x08, 0x08, 0xff, 0x08, 0x08,

0x00, 0x00, 0x00, 0xff, 0x0a, 0x0a,

0x00, 0xff, 0x00, 0xff, 0x08, 0x08,

0x00, 0x0f, 0x08, 0x0b, 0x0a, 0x0a,

0x00, 0xfe, 0x02, 0xfa, 0x0a, 0x0a,

0x0a, 0x0b, 0x08, 0x0b, 0x0a, 0x0a,

0x0a, 0xfa, 0x02, 0xfa, 0x0a, 0x0a,

0x00, 0xff, 0x00, 0xfb, 0x0a, 0x0a,

0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,

0x0a, 0xfb, 0x00, 0xfb, 0x0a, 0x0a,

0x0a, 0x0a, 0x0a, 0x0b, 0x0a, 0x0a,

0x08, 0x0f, 0x08, 0x0f, 0x08, 0x08,

0x0a, 0x0a, 0x0a, 0xfa, 0x0a, 0x0a,

0x08, 0xf8, 0x08, 0xf8, 0x08, 0x08,

0x00, 0x0f, 0x08, 0x0f, 0x08, 0x08,

0x00, 0x00, 0x00, 0x0f, 0x0a, 0x0a,

0x00, 0x00, 0x00, 0xfe, 0x0a, 0x0a,

0x00, 0xf8, 0x08, 0xf8, 0x08, 0x08,

0x08, 0xff, 0x08, 0xff, 0x08, 0x08,

0x00, 0x7e, 0x4b, 0x4a, 0x4b, 0x42,

0x0a, 0x0a, 0x0a, 0xff, 0x0a, 0x0a,

0x08, 0x08, 0x08, 0x0f, 0x00, 0x00,

0x00, 0x00, 0x00, 0xf8, 0x08, 0x08,

0xff, 0xff, 0xff, 0xff, 0xff, 0xff,

0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,

0xff, 0xff, 0xff, 0x00, 0x00, 0x00,

0x00, 0x00, 0x00, 0xff, 0xff, 0xff,

0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,

0x00, 0x3e, 0x49, 0x49, 0x41, 0x22,

0x00, 0x38, 0x54, 0x54, 0x44, 0x28,

0x00, 0x01, 0x40, 0x7e, 0x40, 0x01,

0x00, 0x00, 0x01, 0x7c, 0x41, 0x00,

0x00, 0x27, 0x48, 0x4b, 0x48, 0x3f,

0x00, 0x9d, 0xa2, 0x62, 0x3d, 0x00,

0x00, 0x06, 0x09, 0x09, 0x06, 0x00,

0x00, 0x38, 0x55, 0x54, 0x55, 0x08,

0x00, 0x00, 0x18, 0x18, 0x00, 0x00,

0x00, 0x00, 0x08, 0x00, 0x00, 0x00,

0x00, 0x30, 0x40, 0x3e, 0x02, 0x02,

0x7f, 0x06, 0x18, 0x7f, 0x13, 0x13,

0x2a, 0x3e, 0x14, 0x14, 0x3e, 0x2a,

0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00,

0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

0x00, 0x7e, 0x11, 0x11, 0x11, 0x7e,

0x00, 0x7f, 0x49, 0x49, 0x49, 0x31,

0x00, 0x7f, 0x49, 0x49, 0x49, 0x36,

0x00, 0x7f, 0x01, 0x01, 0x01, 0x01,

0xc0, 0x7e, 0x41, 0x41, 0x7f, 0xc0,

0x00, 0x7f, 0x49, 0x49, 0x49, 0x41,

0x00, 0x77, 0x08, 0x7f, 0x08, 0x77,

0x22, 0x49, 0x49, 0x49, 0x36, 0x00,

0x00, 0x7f, 0x20, 0x10, 0x08, 0x7f,

0x00, 0x7e, 0x21, 0x11, 0x09, 0x7e,

0x00, 0x7f, 0x08, 0x14, 0x22, 0x41,

0x00, 0x40, 0x7e, 0x01, 0x01, 0x7f,

0x00, 0x7f, 0x02, 0x04, 0x02, 0x7f,

0x00, 0x7f, 0x08, 0x08, 0x08, 0x7f,

0x00, 0x3e, 0x41, 0x41, 0x41, 0x3e,

0x00, 0x7f, 0x01, 0x01, 0x01, 0x7f,

0x00, 0x7f, 0x09, 0x09, 0x09, 0x06,

0x00, 0x3e, 0x41, 0x41, 0x41, 0x22,

0x00, 0x01, 0x01, 0x7f, 0x01, 0x01,

0x00, 0x27, 0x48, 0x48, 0x48, 0x3f,

0x00, 0x0e, 0x11, 0x7f, 0x11, 0x0e,

0x00, 0x63, 0x14, 0x08, 0x14, 0x63,

0x00, 0x7f, 0x40, 0x40, 0x7f, 0xc0,

0x00, 0x07, 0x08, 0x08, 0x08, 0x7f,

0x00, 0x7f, 0x40, 0x7f, 0x40, 0x7f,

0x00, 0x7f, 0x40, 0x7f, 0x40, 0xff,

0x03, 0x01, 0x7f, 0x48, 0x48, 0x30,

0x00, 0x7f, 0x48, 0x48, 0x30, 0x7f,

0x00, 0x7f, 0x48, 0x48, 0x48, 0x30,

0x00, 0x22, 0x41, 0x49, 0x49, 0x3e,

0x00, 0x7f, 0x08, 0x3e, 0x41, 0x3e,

0x00, 0x66, 0x19, 0x09, 0x09, 0x7f,

0x00, 0x20, 0x54, 0x54, 0x54, 0x78,

0x00, 0x3c, 0x4a, 0x4a, 0x4a, 0x31,

0x00, 0x7c, 0x54, 0x54, 0x54, 0x28,

0x00, 0x7c, 0x04, 0x04, 0x0c, 0x00,

0xc0, 0x78, 0x44, 0x44, 0x7c, 0xc0,

0x00, 0x38, 0x54, 0x54, 0x54, 0x08,

0x00, 0x6c, 0x10, 0x7c, 0x10, 0x6c,

0x00, 0x28, 0x44, 0x54, 0x54, 0x28,

0x00, 0x7c, 0x20, 0x10, 0x08, 0x7c,

0x00, 0x7c, 0x20, 0x12, 0x0a, 0x7c,

0x00, 0x7c, 0x10, 0x28, 0x44, 0x00,

0x40, 0x38, 0x04, 0x04, 0x7c, 0x00,

0x00, 0x7c, 0x08, 0x10, 0x08, 0x7c,

0x00, 0x7c, 0x10, 0x10, 0x10, 0x7c,

0x00, 0x38, 0x44, 0x44, 0x44, 0x38,

0x00, 0x7c, 0x04, 0x04, 0x04, 0x7c,

0x00, 0xfc, 0x44, 0x44, 0x44, 0x38,

0x00, 0x38, 0x44, 0x44, 0x44, 0x28,

0x00, 0x04, 0x04, 0x7c, 0x04, 0x04,

0x00, 0x9c, 0xa0, 0x60, 0x3c, 0x00,

0x00, 0x18, 0x24, 0x7c, 0x24, 0x18,

0x00, 0x6c, 0x10, 0x10, 0x6c, 0x00,

0x00, 0x7c, 0x40, 0x40, 0x7c, 0xc0,

0x00, 0x0c, 0x10, 0x10, 0x10, 0x7c,

0x00, 0x7c, 0x40, 0x7c, 0x40, 0x7c,

0x00, 0x7c, 0x40, 0x7c, 0x40, 0xfc,

0x0c, 0x04, 0x7c, 0x50, 0x50, 0x20,

0x00, 0x7c, 0x50, 0x50, 0x20, 0x7c,

0x00, 0x7c, 0x50, 0x50, 0x50, 0x20,

0x00, 0x28, 0x44, 0x54, 0x54, 0x38,

0x00, 0x7c, 0x10, 0x38, 0x44, 0x38,

0x00, 0x48, 0x34, 0x14, 0x14, 0x7c
};

volatile unsigned char method = 1;
volatile unsigned char flag = 0;

void LCDG_InitPort(void)
{
PORTC   = 0xff;
DDRC = 0xff;
PORTB = 0xff;
DDRB = 0xff;   
}

void LCDG_WaitFLAG_BUSY(void)
{
unsigned char stat;
DDRC = 0;                    
PORTC   = 0xff;  
PORTB |= (1<<(3))	;         
PORTB &= (~(1<<(2))); 
delay_us(2);
do{
PORTB &= (~(1<<(4))); 
delay_us(5);
stat = PINC;                 
delay_us(5);
PORTB |= (1<<(4))	;
}
while((stat & (1<<7)) != 0); 
DDRC = 0xff;                 
PORTC   = 0;  
}

unsigned char LCDG_ReadData(void)
{
unsigned char data;
DDRC = 0;                   
PORTC   = 0xff;
PORTB |= (1<<(3))	;
PORTB |= (1<<(2))	;  
delay_us(2);
PORTB &= (~(1<<(4)));
delay_us(5);
data = PINC;
PORTB |= (1<<(4))	;

DDRC = 0xff;
PORTC   = 0;    
return data;
}

inline void LCDG_CommonFunc(unsigned char data)
{
PORTB &= (~(1<<(3)));
delay_us(2);
PORTB &= (~(1<<(4)));
PORTC   = data;
delay_us(5);
PORTB |= (1<<(4))	;
}

void LCDG_SendCom(unsigned char data)
{
LCDG_WaitFLAG_BUSY();                   
PORTB &= (~(1<<(2)));
LCDG_CommonFunc(data);
}

void LCDG_SendData(unsigned char data)
{
LCDG_WaitFLAG_BUSY();
PORTB |= (1<<(2))	;
LCDG_CommonFunc(data);
}

void LCDG_InitLcd(void)
{
PORTB &= (~(1<<(0)));
delay_ms(400);
PORTB |= (1<<(0))	;
delay_ms(400);

PORTB |= (1<<(1))	;
LCDG_SendCom(0xee               );
LCDG_SendCom(0xa4               );
LCDG_SendCom(0xa9               );
LCDG_SendCom(0xaf               );
LCDG_SendCom(0xa1               ); 
LCDG_SendCom(0xe2               );
LCDG_SendCom(0xc0); 

PORTB &= (~(1<<(1)));
LCDG_SendCom(0xee               );
LCDG_SendCom(0xa4               );
LCDG_SendCom(0xa9               );
LCDG_SendCom(0xaf               );
LCDG_SendCom(0xa0               );  
LCDG_SendCom(0xe2               );
LCDG_SendCom(0xc0);  
}

void LCDG_ClearLcd(unsigned char x1, unsigned char x2)
{
unsigned char xPos = x1;
unsigned char realAdr = 0;

while(xPos < x2){    
if (realAdr < 61) {
PORTB |= (1<<(1))	;
realAdr = realAdr + 19;
}
else {
PORTB &= (~(1<<(1))); 
realAdr = realAdr - 61;
}

LCDG_SendCom(0xb8);
LCDG_SendCom(realAdr);
LCDG_SendData(0);
LCDG_SendCom(0xb9);
LCDG_SendCom(realAdr);  
LCDG_SendData(0);
LCDG_SendCom(0xba);
LCDG_SendCom(realAdr);
LCDG_SendData(0);
LCDG_SendCom(0xbb);
LCDG_SendCom(realAdr);
LCDG_SendData(0);

xPos++;
realAdr = xPos;
} 
}

void LCDG_SetMethod(unsigned char met)
{
method = met;  
}

void LCDG_PutPixel(unsigned char xPos, unsigned char yPos)
{
unsigned char realAdr;
unsigned char realPage;
unsigned char data;
unsigned char currentData;

if ((xPos > 122) || (yPos > 31)) return;

realAdr = xPos;
realPage = 0xb8 + (yPos/8);
data = yPos%8;

if (realAdr < 61) {
PORTB |= (1<<(1))	;
realAdr = realAdr + 19;
}
else {
PORTB &= (~(1<<(1))); 
realAdr = realAdr - 61;
}
LCDG_WaitFLAG_BUSY();
LCDG_SendCom(realPage);
LCDG_SendCom(realAdr);
LCDG_ReadData();
currentData = LCDG_ReadData(); 
switch(method){
case 0: {currentData &= ~(1<<data); break;}    
case 1 : {currentData |= (1<<data); break;}
case 2 : {currentData ^= (1<<data); break;}
}
LCDG_SendCom(realAdr);
LCDG_SendData(currentData);
}

void LCDG_SetInv(unsigned char f)
{
flag = f; 
}

unsigned char PlaceArray[] = {0,6,12,18,24,30,36,42,48,54,60,66,72,78,84,90,96,102,108,114};

void LCDG_SendSymbol(unsigned char xPos, unsigned char yPos,unsigned char data)
{
unsigned char i;
unsigned char realAdr;
unsigned char realPage = 0xbb - yPos;
unsigned int  pointerFont = ((unsigned int)data<<2) + ((unsigned int)data<<1);
realAdr = PlaceArray[xPos];
xPos = realAdr;

for(i = 0; i<=5; i++){
if (realAdr < 61) {
PORTB |= (1<<(1))	;
realAdr = realAdr + 19;
}
else {
PORTB &= (~(1<<(1))); 
realAdr = realAdr - 61;
}

data = font_6x8_Data[pointerFont];
if(flag) data = ~data;
LCDG_SendCom(realPage);
LCDG_SendCom(realAdr);
LCDG_SendData(data);
xPos++;
realAdr = xPos;
pointerFont++;
}
}

void LCDG_SendString(unsigned char xPos, unsigned char yPos, char * string)
{
unsigned char data = 0;
while(*string){
data = *string++;
LCDG_SendSymbol(xPos,yPos,data);
xPos++;
}
}

void LCDG_DrawLine(unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2)
{
int dx, dy, i1, i2, i, kx, ky;
int d;     
int x, y;
int flag;

dy = y2 - y1;
dx = x2 - x1;
if (dx == 0 && dy == 0){
LCDG_PutPixel(x1,y1);    
return;
}
kx = 1; 
ky = 1; 

if( dx < 0 ){ dx = -dx; kx = -1; }
else if(dx == 0)        kx = 0;    

if(dy < 0) { dy = -dy; ky = -1; }

if(dx < dy){ flag = 0; d = dx; dx = dy; dy = d; }
else         flag = 1;

i1 = dy + dy; d = i1 - dx; i2 = d - dx;
x = x1; y = y1;

for(i=0; i < dx; i++){
LCDG_PutPixel(x,y);     

if(flag) x += kx;
else     y += ky;

if( d < 0 ) 
d += i1;
else{       
d += i2;
if(flag) y += ky; 
else     x += kx;
}
}
LCDG_PutPixel(x,y);
}

void LCDG_DrawCircle(unsigned char xc,unsigned char yc,unsigned char r)
{
int  x,y,d;
y = r; 
d = 3-((int)r<<1);
x = 0;

while(x <= y)
{
LCDG_PutPixel(x+xc,y+yc);
LCDG_PutPixel(x+xc,-y+yc);
LCDG_PutPixel(-x+xc,-y+yc);
LCDG_PutPixel(-x+xc,y+yc);
LCDG_PutPixel(y+xc,x+yc);
LCDG_PutPixel(y+xc,-x+yc);
LCDG_PutPixel(-y+xc,-x+yc);
LCDG_PutPixel(-y+xc,x+yc);
if (d<0) {
d = d+4*x+6;
} else {
d = d+4*(x-y)+10;
y--;
}
x++;
};  

}

void LCDG_DrawRect(unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2, unsigned char fill)
{
LCDG_DrawLine(x1, y1, x2, y1);
LCDG_DrawLine(x1, y2, x2, y2);  
LCDG_DrawLine(x1, (y1+1), x1, (y2-1));  
LCDG_DrawLine(x2, (y1+1), x2, (y2-1));  
if (fill){
while(x1<x2){
x1++;
LCDG_DrawLine(x1, (y1+1), x1, (y2-1));
}

}
}
