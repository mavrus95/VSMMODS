,,,       
,,,       
,,,       ;Измерение температуры в трёх точках датчиком TMP36
,,,       ;версия 3
,,,       ;Дата     14.05.2011
,,,       ;AVR      ATmega32
,,,       ;Тактовая частота      1МГц
,,,       ;Описание:  Демонстрация модели температурного датчика TMP36
,,,       ;Автор      VALE1
,,,       
,,,       .include "m32def.inc"
,,,       
,,,       ;***** Created: 2011-04-15 12:00 ******* Source: ATmega32.xml ************
,,,       ;*************************************************************************
,,,       ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
,,,       ;* 
,,,       ;* Number            : AVR000
,,,       ;* File Name         : "m32def.inc"
,,,       ;* Title             : Register/Bit Definitions for the ATmega32
,,,       ;* Date              : 2011-04-15
,,,       ;* Version           : 2.35
,,,       ;* Support E-mail    : avr@atmel.com
,,,       ;* Target MCU        : ATmega32
,,,       ;* 
,,,       ;* DESCRIPTION
,,,       ;* When including this file in the assembly program file, all I/O register 
,,,       ;* names and I/O register bit names appearing in the data book can be used.
,,,       ;* In addition, the six registers forming the three data pointers X, Y and 
,,,       ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
,,,       ;* SRAM is also defined 
,,,       ;* 
,,,       ;* The Register names are represented by their hexadecimal address.
,,,       ;* 
,,,       ;* The Register Bit names are represented by their bit number (0-7).
,,,       ;* 
,,,       ;* Please observe the difference in using the bit names with instructions
,,,       ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
,,,       ;* (skip if bit in register set/cleared). The following example illustrates
,,,       ;* this:
,,,       ;* 
,,,       ;* in    r16,PORTB             ;read PORTB latch
,,,       ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
,,,       ;* out   PORTB,r16             ;output to PORTB
,,,       ;* 
,,,       ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
,,,       ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
,,,       ;* rjmp  TOV0_is_set           ;jump if set
,,,       ;* ...                         ;otherwise do something else
,,,       ;*************************************************************************
,,,       
,,,       #ifndef _M32DEF_INC_
,,,       #define _M32DEF_INC_
,,,       
,,,       
,,,       #pragma partinc 0
,,,       
,,,       ; ***** SPECIFY DEVICE ***************************************************
,,,       .device ATmega32
,,,       #pragma AVRPART ADMIN PART_NAME ATmega32
,,,       .equ   SIGNATURE_000   = 0x1e
,,,       .equ   SIGNATURE_001   = 0x95
,,,       .equ   SIGNATURE_002   = 0x02
,,,       
,,,       #pragma AVRPART CORE CORE_VERSION V2E
,,,       
,,,       
,,,       ; ***** I/O REGISTER DEFINITIONS *****************************************
,,,       ; NOTE:
,,,       ; Definitions marked "MEMORY MAPPED"are extended I/O ports
,,,       ; and cannot be used with IN/OUT instructions
,,,       .equ   SREG    = 0x3f
,,,       .equ   SPL     = 0x3d
,,,       .equ   SPH     = 0x3e
,,,       .equ   OCR0    = 0x3c
,,,       .equ   GICR    = 0x3b
,,,       .equ   GIFR    = 0x3a
,,,       .equ   TIMSK   = 0x39
,,,       .equ   TIFR    = 0x38
,,,       .equ   SPMCR   = 0x37
,,,       .equ   TWCR    = 0x36
,,,       .equ   MCUCR   = 0x35
,,,       .equ   MCUCSR  = 0x34
,,,       .equ   TCCR0   = 0x33
,,,       .equ   TCNT0   = 0x32
,,,       .equ   OSCCAL  = 0x31
,,,       .equ   OCDR    = 0x31
,,,       .equ   SFIOR   = 0x30
,,,       .equ   TCCR1A  = 0x2f
,,,       .equ   TCCR1B  = 0x2e
,,,       .equ   TCNT1L  = 0x2c
,,,       .equ   TCNT1H  = 0x2d
,,,       .equ   OCR1AL  = 0x2a
,,,       .equ   OCR1AH  = 0x2b
,,,       .equ   OCR1BL  = 0x28
,,,       .equ   OCR1BH  = 0x29
,,,       .equ   ICR1L   = 0x26
,,,       .equ   ICR1H   = 0x27
,,,       .equ   TCCR2   = 0x25
,,,       .equ   TCNT2   = 0x24
,,,       .equ   OCR2    = 0x23
,,,       .equ   ASSR    = 0x22
,,,       .equ   WDTCR   = 0x21
,,,       .equ   UBRRH   = 0x20
,,,       .equ   UCSRC   = 0x20
,,,       .equ   EEARL   = 0x1e
,,,       .equ   EEARH   = 0x1f
,,,       .equ   EEDR    = 0x1d
,,,       .equ   EECR    = 0x1c
,,,       .equ   PORTA   = 0x1b
,,,       .equ   DDRA    = 0x1a
,,,       .equ   PINA    = 0x19
,,,       .equ   PORTB   = 0x18
,,,       .equ   DDRB    = 0x17
,,,       .equ   PINB    = 0x16
,,,       .equ   PORTC   = 0x15
,,,       .equ   DDRC    = 0x14
,,,       .equ   PINC    = 0x13
,,,       .equ   PORTD   = 0x12
,,,       .equ   DDRD    = 0x11
,,,       .equ   PIND    = 0x10
,,,       .equ   SPDR    = 0x0f
,,,       .equ   SPSR    = 0x0e
,,,       .equ   SPCR    = 0x0d
,,,       .equ   UDR     = 0x0c
,,,       .equ   UCSRA   = 0x0b
,,,       .equ   UCSRB   = 0x0a
,,,       .equ   UBRRL   = 0x09
,,,       .equ   ACSR    = 0x08
,,,       .equ   ADMUX   = 0x07
,,,       .equ   ADCSRA  = 0x06
,,,       .equ   ADCH    = 0x05
,,,       .equ   ADCL    = 0x04
,,,       .equ   TWDR    = 0x03
,,,       .equ   TWAR    = 0x02
,,,       .equ   TWSR    = 0x01
,,,       .equ   TWBR    = 0x00
,,,       
,,,       
,,,       ; ***** BIT DEFINITIONS **************************************************
,,,       
,,,       ; ***** EEPROM ***********************
,,,       ; EEDR - EEPROM Data Register
,,,       .equ   EEDR0   = 0     ; EEPROM Data Register bit 0
,,,       .equ   EEDR1   = 1     ; EEPROM Data Register bit 1
,,,       .equ   EEDR2   = 2     ; EEPROM Data Register bit 2
,,,       .equ   EEDR3   = 3     ; EEPROM Data Register bit 3
,,,       .equ   EEDR4   = 4     ; EEPROM Data Register bit 4
,,,       .equ   EEDR5   = 5     ; EEPROM Data Register bit 5
,,,       .equ   EEDR6   = 6     ; EEPROM Data Register bit 6
,,,       .equ   EEDR7   = 7     ; EEPROM Data Register bit 7
,,,       
,,,       ; EECR - EEPROM Control Register
,,,       .equ   EERE    = 0     ; EEPROM Read Enable
,,,       .equ   EEWE    = 1     ; EEPROM Write Enable
,,,       .equ   EEMWE   = 2     ; EEPROM Master Write Enable
,,,       .equ   EERIE   = 3     ; EEPROM Ready Interrupt Enable
,,,       
,,,       
,,,       ; ***** WATCHDOG *********************
,,,       ; WDTCR - Watchdog Timer Control Register
,,,       .equ   WDP0    = 0     ; Watch Dog Timer Prescaler bit 0
,,,       .equ   WDP1    = 1     ; Watch Dog Timer Prescaler bit 1
,,,       .equ   WDP2    = 2     ; Watch Dog Timer Prescaler bit 2
,,,       .equ   WDE     = 3     ; Watch Dog Enable
,,,       .equ   WDTOE   = 4     ; RW
,,,       .equ   WDDE    = WDTOE ; For compatibility
,,,       
,,,       
,,,       ; ***** EXTERNAL_INTERRUPT ***********
,,,       ; GICR - General Interrupt Control Register
,,,       .equ   GIMSK   = GICR  ; For compatibility
,,,       .equ   IVCE    = 0     ; Interrupt Vector Change Enable
,,,       .equ   IVSEL   = 1     ; Interrupt Vector Select
,,,       .equ   INT2    = 5     ; External Interrupt Request 2 Enable
,,,       .equ   INT0    = 6     ; External Interrupt Request 0 Enable
,,,       .equ   INT1    = 7     ; External Interrupt Request 1 Enable
,,,       
,,,       ; GIFR - General Interrupt Flag Register
,,,       .equ   INTF2   = 5     ; External Interrupt Flag 2
,,,       .equ   INTF0   = 6     ; External Interrupt Flag 0
,,,       .equ   INTF1   = 7     ; External Interrupt Flag 1
,,,       
,,,       ; MCUCR - General Interrupt Control Register
,,,       .equ   ISC00   = 0     ; Interrupt Sense Control 0 Bit 0
,,,       .equ   ISC01   = 1     ; Interrupt Sense Control 0 Bit 1
,,,       .equ   ISC10   = 2     ; Interrupt Sense Control 1 Bit 0
,,,       .equ   ISC11   = 3     ; Interrupt Sense Control 1 Bit 1
,,,       
,,,       ; MCUCSR - MCU Control And Status Register
,,,       .equ   ISC2    = 6     ; Interrupt Sense Control 2
,,,       
,,,       
,,,       ; ***** TIMER_COUNTER_0 **************
,,,       ; TCCR0 - Timer/Counter Control Register
,,,       .equ   CS00    = 0     ; Clock Select 1
,,,       .equ   CS01    = 1     ; Clock Select 1
,,,       .equ   CS02    = 2     ; Clock Select 2
,,,       .equ   WGM01   = 3     ; Waveform Generation Mode 1
,,,       .equ   CTC0    = WGM01 ; For compatibility
,,,       .equ   COM00   = 4     ; Compare match Output Mode 0
,,,       .equ   COM01   = 5     ; Compare Match Output Mode 1
,,,       .equ   WGM00   = 6     ; Waveform Generation Mode
,,,       .equ   PWM0    = WGM00 ; For compatibility
,,,       .equ   FOC0    = 7     ; Force Output Compare
,,,       
,,,       ; TCNT0 - Timer/Counter Register
,,,       .equ   TCNT0_0 = 0     ; 
,,,       .equ   TCNT0_1 = 1     ; 
,,,       .equ   TCNT0_2 = 2     ; 
,,,       .equ   TCNT0_3 = 3     ; 
,,,       .equ   TCNT0_4 = 4     ; 
,,,       .equ   TCNT0_5 = 5     ; 
,,,       .equ   TCNT0_6 = 6     ; 
,,,       .equ   TCNT0_7 = 7     ; 
,,,       
,,,       ; OCR0 - Output Compare Register
,,,       .equ   OCR0_0  = 0     ; 
,,,       .equ   OCR0_1  = 1     ; 
,,,       .equ   OCR0_2  = 2     ; 
,,,       .equ   OCR0_3  = 3     ; 
,,,       .equ   OCR0_4  = 4     ; 
,,,       .equ   OCR0_5  = 5     ; 
,,,       .equ   OCR0_6  = 6     ; 
,,,       .equ   OCR0_7  = 7     ; 
,,,       
,,,       ; TIMSK - Timer/Counter Interrupt Mask Register
,,,       .equ   TOIE0   = 0     ; Timer/Counter0 Overflow Interrupt Enable
,,,       .equ   OCIE0   = 1     ; Timer/Counter0 Output Compare Match Interrupt register
,,,       
,,,       ; TIFR - Timer/Counter Interrupt Flag register
,,,       .equ   TOV0    = 0     ; Timer/Counter0 Overflow Flag
,,,       .equ   OCF0    = 1     ; Output Compare Flag 0
,,,       
,,,       
,,,       ; ***** TIMER_COUNTER_2 **************
,,,       ; TIMSK - Timer/Counter Interrupt Mask register
,,,       .equ   TOIE2   = 6     ; Timer/Counter2 Overflow Interrupt Enable
,,,       .equ   OCIE2   = 7     ; Timer/Counter2 Output Compare Match Interrupt Enable
,,,       
,,,       ; TIFR - Timer/Counter Interrupt Flag Register
,,,       .equ   TOV2    = 6     ; Timer/Counter2 Overflow Flag
,,,       .equ   OCF2    = 7     ; Output Compare Flag 2
,,,       
,,,       ; TCCR2 - Timer/Counter2 Control Register
,,,       .equ   CS20    = 0     ; Clock Select bit 0
,,,       .equ   CS21    = 1     ; Clock Select bit 1
,,,       .equ   CS22    = 2     ; Clock Select bit 2
,,,       .equ   WGM21   = 3     ; Clear Timer/Counter2 on Compare Match
,,,       .equ   CTC2    = WGM21 ; For compatibility
,,,       .equ   COM20   = 4     ; Compare Output Mode bit 0
,,,       .equ   COM21   = 5     ; Compare Output Mode bit 1
,,,       .equ   WGM20   = 6     ; Pulse Width Modulator Enable
,,,       .equ   PWM2    = WGM20 ; For compatibility
,,,       .equ   FOC2    = 7     ; Force Output Compare
,,,       
,,,       ; TCNT2 - Timer/Counter2
,,,       .equ   TCNT2_0 = 0     ; Timer/Counter 2 bit 0
,,,       .equ   TCNT2_1 = 1     ; Timer/Counter 2 bit 1
,,,       .equ   TCNT2_2 = 2     ; Timer/Counter 2 bit 2
,,,       .equ   TCNT2_3 = 3     ; Timer/Counter 2 bit 3
,,,       .equ   TCNT2_4 = 4     ; Timer/Counter 2 bit 4
,,,       .equ   TCNT2_5 = 5     ; Timer/Counter 2 bit 5
,,,       .equ   TCNT2_6 = 6     ; Timer/Counter 2 bit 6
,,,       .equ   TCNT2_7 = 7     ; Timer/Counter 2 bit 7
,,,       
,,,       ; OCR2 - Timer/Counter2 Output Compare Register
,,,       .equ   OCR2_0  = 0     ; Timer/Counter2 Output Compare Register Bit 0
,,,       .equ   OCR2_1  = 1     ; Timer/Counter2 Output Compare Register Bit 1
,,,       .equ   OCR2_2  = 2     ; Timer/Counter2 Output Compare Register Bit 2
,,,       .equ   OCR2_3  = 3     ; Timer/Counter2 Output Compare Register Bit 3
,,,       .equ   OCR2_4  = 4     ; Timer/Counter2 Output Compare Register Bit 4
,,,       .equ   OCR2_5  = 5     ; Timer/Counter2 Output Compare Register Bit 5
,,,       .equ   OCR2_6  = 6     ; Timer/Counter2 Output Compare Register Bit 6
,,,       .equ   OCR2_7  = 7     ; Timer/Counter2 Output Compare Register Bit 7
,,,       
,,,       ; ASSR - Asynchronous Status Register
,,,       .equ   TCR2UB  = 0     ; Timer/counter Control Register2 Update Busy
,,,       .equ   OCR2UB  = 1     ; Output Compare Register2 Update Busy
,,,       .equ   TCN2UB  = 2     ; Timer/Counter2 Update Busy
,,,       .equ   AS2     = 3     ; Asynchronous Timer/counter2
,,,       
,,,       
,,,       ; ***** TIMER_COUNTER_1 **************
,,,       ; TIMSK - Timer/Counter Interrupt Mask Register
,,,       .equ   TOIE1   = 2     ; Timer/Counter1 Overflow Interrupt Enable
,,,       .equ   OCIE1B  = 3     ; Timer/Counter1 Output CompareB Match Interrupt Enable
,,,       .equ   OCIE1A  = 4     ; Timer/Counter1 Output CompareA Match Interrupt Enable
,,,       .equ   TICIE1  = 5     ; Timer/Counter1 Input Capture Interrupt Enable
,,,       
,,,       ; TIFR - Timer/Counter Interrupt Flag register
,,,       .equ   TOV1    = 2     ; Timer/Counter1 Overflow Flag
,,,       .equ   OCF1B   = 3     ; Output Compare Flag 1B
,,,       .equ   OCF1A   = 4     ; Output Compare Flag 1A
,,,       .equ   ICF1    = 5     ; Input Capture Flag 1
,,,       
,,,       ; TCCR1A - Timer/Counter1 Control Register A
,,,       .equ   WGM10   = 0     ; Waveform Generation Mode
,,,       .equ   PWM10   = WGM10 ; For compatibility
,,,       .equ   WGM11   = 1     ; Waveform Generation Mode
,,,       .equ   PWM11   = WGM11 ; For compatibility
,,,       .equ   FOC1B   = 2     ; Force Output Compare 1B
,,,       .equ   FOC1A   = 3     ; Force Output Compare 1A
,,,       .equ   COM1B0  = 4     ; Compare Output Mode 1B, bit 0
,,,       .equ   COM1B1  = 5     ; Compare Output Mode 1B, bit 1
,,,       .equ   COM1A0  = 6     ; Compare Ouput Mode 1A, bit 0
,,,       .equ   COM1A1  = 7     ; Compare Output Mode 1A, bit 1
,,,       
,,,       ; TCCR1B - Timer/Counter1 Control Register B
,,,       .equ   CS10    = 0     ; Prescaler source of Timer/Counter 1
,,,       .equ   CS11    = 1     ; Prescaler source of Timer/Counter 1
,,,       .equ   CS12    = 2     ; Prescaler source of Timer/Counter 1
,,,       .equ   WGM12   = 3     ; Waveform Generation Mode
,,,       .equ   CTC10   = WGM12 ; For compatibility
,,,       .equ   CTC1    = WGM12 ; For compatibility
,,,       .equ   WGM13   = 4     ; Waveform Generation Mode
,,,       .equ   CTC11   = WGM13 ; For compatibility
,,,       .equ   ICES1   = 6     ; Input Capture 1 Edge Select
,,,       .equ   ICNC1   = 7     ; Input Capture 1 Noise Canceler
,,,       
,,,       
,,,       ; ***** SPI **************************
,,,       ; SPDR - SPI Data Register
,,,       .equ   SPDR0   = 0     ; SPI Data Register bit 0
,,,       .equ   SPDR1   = 1     ; SPI Data Register bit 1
,,,       .equ   SPDR2   = 2     ; SPI Data Register bit 2
,,,       .equ   SPDR3   = 3     ; SPI Data Register bit 3
,,,       .equ   SPDR4   = 4     ; SPI Data Register bit 4
,,,       .equ   SPDR5   = 5     ; SPI Data Register bit 5
,,,       .equ   SPDR6   = 6     ; SPI Data Register bit 6
,,,       .equ   SPDR7   = 7     ; SPI Data Register bit 7
,,,       
,,,       ; SPSR - SPI Status Register
,,,       .equ   SPI2X   = 0     ; Double SPI Speed Bit
,,,       .equ   WCOL    = 6     ; Write Collision Flag
,,,       .equ   SPIF    = 7     ; SPI Interrupt Flag
,,,       
,,,       ; SPCR - SPI Control Register
,,,       .equ   SPR0    = 0     ; SPI Clock Rate Select 0
,,,       .equ   SPR1    = 1     ; SPI Clock Rate Select 1
,,,       .equ   CPHA    = 2     ; Clock Phase
,,,       .equ   CPOL    = 3     ; Clock polarity
,,,       .equ   MSTR    = 4     ; Master/Slave Select
,,,       .equ   DORD    = 5     ; Data Order
,,,       .equ   SPE     = 6     ; SPI Enable
,,,       .equ   SPIE    = 7     ; SPI Interrupt Enable
,,,       
,,,       
,,,       ; ***** USART ************************
,,,       ; UDR - USART I/O Data Register
,,,       .equ   UDR0    = 0     ; USART I/O Data Register bit 0
,,,       .equ   UDR1    = 1     ; USART I/O Data Register bit 1
,,,       .equ   UDR2    = 2     ; USART I/O Data Register bit 2
,,,       .equ   UDR3    = 3     ; USART I/O Data Register bit 3
,,,       .equ   UDR4    = 4     ; USART I/O Data Register bit 4
,,,       .equ   UDR5    = 5     ; USART I/O Data Register bit 5
,,,       .equ   UDR6    = 6     ; USART I/O Data Register bit 6
,,,       .equ   UDR7    = 7     ; USART I/O Data Register bit 7
,,,       
,,,       ; UCSRA - USART Control and Status Register A
,,,       .equ   USR     = UCSRA ; For compatibility
,,,       .equ   MPCM    = 0     ; Multi-processor Communication Mode
,,,       .equ   U2X     = 1     ; Double the USART transmission speed
,,,       .equ   UPE     = 2     ; Parity Error
,,,       .equ   PE      = UPE   ; For compatibility
,,,       .equ   DOR     = 3     ; Data overRun
,,,       .equ   FE      = 4     ; Framing Error
,,,       .equ   UDRE    = 5     ; USART Data Register Empty
,,,       .equ   TXC     = 6     ; USART Transmitt Complete
,,,       .equ   RXC     = 7     ; USART Receive Complete
,,,       
,,,       ; UCSRB - USART Control and Status Register B
,,,       .equ   UCR     = UCSRB ; For compatibility
,,,       .equ   TXB8    = 0     ; Transmit Data Bit 8
,,,       .equ   RXB8    = 1     ; Receive Data Bit 8
,,,       .equ   UCSZ2   = 2     ; Character Size
,,,       .equ   CHR9    = UCSZ2 ; For compatibility
,,,       .equ   TXEN    = 3     ; Transmitter Enable
,,,       .equ   RXEN    = 4     ; Receiver Enable
,,,       .equ   UDRIE   = 5     ; USART Data register Empty Interrupt Enable
,,,       .equ   TXCIE   = 6     ; TX Complete Interrupt Enable
,,,       .equ   RXCIE   = 7     ; RX Complete Interrupt Enable
,,,       
,,,       ; UCSRC - USART Control and Status Register C
,,,       .equ   UCPOL   = 0     ; Clock Polarity
,,,       .equ   UCSZ0   = 1     ; Character Size
,,,       .equ   UCSZ1   = 2     ; Character Size
,,,       .equ   USBS    = 3     ; Stop Bit Select
,,,       .equ   UPM0    = 4     ; Parity Mode Bit 0
,,,       .equ   UPM1    = 5     ; Parity Mode Bit 1
,,,       .equ   UMSEL   = 6     ; USART Mode Select
,,,       .equ   URSEL   = 7     ; Register Select
,,,       
,,,       .equ   UBRRHI  = UBRRH ; For compatibility
,,,       
,,,       ; ***** ANALOG_COMPARATOR ************
,,,       ; SFIOR - Special Function IO Register
,,,       .equ   ACME    = 3     ; Analog Comparator Multiplexer Enable
,,,       
,,,       ; ACSR - Analog Comparator Control And Status Register
,,,       .equ   ACIS0   = 0     ; Analog Comparator Interrupt Mode Select bit 0
,,,       .equ   ACIS1   = 1     ; Analog Comparator Interrupt Mode Select bit 1
,,,       .equ   ACIC    = 2     ; Analog Comparator Input Capture Enable
,,,       .equ   ACIE    = 3     ; Analog Comparator Interrupt Enable
,,,       .equ   ACI     = 4     ; Analog Comparator Interrupt Flag
,,,       .equ   ACO     = 5     ; Analog Compare Output
,,,       .equ   ACBG    = 6     ; Analog Comparator Bandgap Select
,,,       .equ   ACD     = 7     ; Analog Comparator Disable
,,,       
,,,       
,,,       ; ***** AD_CONVERTER *****************
,,,       ; ADMUX - The ADC multiplexer Selection Register
,,,       .equ   MUX0    = 0     ; Analog Channel and Gain Selection Bits
,,,       .equ   MUX1    = 1     ; Analog Channel and Gain Selection Bits
,,,       .equ   MUX2    = 2     ; Analog Channel and Gain Selection Bits
,,,       .equ   MUX3    = 3     ; Analog Channel and Gain Selection Bits
,,,       .equ   MUX4    = 4     ; Analog Channel and Gain Selection Bits
,,,       .equ   ADLAR   = 5     ; Left Adjust Result
,,,       .equ   REFS0   = 6     ; Reference Selection Bit 0
,,,       .equ   REFS1   = 7     ; Reference Selection Bit 1
,,,       
,,,       ; ADCSRA - The ADC Control and Status register
,,,       .equ   ADCSR   = ADCSRA        ; For compatibility
,,,       .equ   ADPS0   = 0     ; ADC  Prescaler Select Bits
,,,       .equ   ADPS1   = 1     ; ADC  Prescaler Select Bits
,,,       .equ   ADPS2   = 2     ; ADC  Prescaler Select Bits
,,,       .equ   ADIE    = 3     ; ADC Interrupt Enable
,,,       .equ   ADIF    = 4     ; ADC Interrupt Flag
,,,       .equ   ADATE   = 5     ; When this bit is written to one,the Timer/Counter2 prescaler will be reset.The bit will be cleared by hardware after the operation is performed.Writing a zero to this bit will have no effect.This bit will always be read as zero if Timer/C                 ounter2 is clocked by the internal CPU clock.If this bit is written when Timer/Counter2 is operating in asynchronous mode,the bit will remain one until the prescaler has been reset.
,,,       .equ   ADFR    = ADATE ; For compatibility
,,,       .equ   ADSC    = 6     ; ADC Start Conversion
,,,       .equ   ADEN    = 7     ; ADC Enable
,,,       
,,,       ; ADCH - ADC Data Register High Byte
,,,       .equ   ADCH0   = 0     ; ADC Data Register High Byte Bit 0
,,,       .equ   ADCH1   = 1     ; ADC Data Register High Byte Bit 1
,,,       .equ   ADCH2   = 2     ; ADC Data Register High Byte Bit 2
,,,       .equ   ADCH3   = 3     ; ADC Data Register High Byte Bit 3
,,,       .equ   ADCH4   = 4     ; ADC Data Register High Byte Bit 4
,,,       .equ   ADCH5   = 5     ; ADC Data Register High Byte Bit 5
,,,       .equ   ADCH6   = 6     ; ADC Data Register High Byte Bit 6
,,,       .equ   ADCH7   = 7     ; ADC Data Register High Byte Bit 7
,,,       
,,,       ; ADCL - ADC Data Register Low Byte
,,,       .equ   ADCL0   = 0     ; ADC Data Register Low Byte Bit 0
,,,       .equ   ADCL1   = 1     ; ADC Data Register Low Byte Bit 1
,,,       .equ   ADCL2   = 2     ; ADC Data Register Low Byte Bit 2
,,,       .equ   ADCL3   = 3     ; ADC Data Register Low Byte Bit 3
,,,       .equ   ADCL4   = 4     ; ADC Data Register Low Byte Bit 4
,,,       .equ   ADCL5   = 5     ; ADC Data Register Low Byte Bit 5
,,,       .equ   ADCL6   = 6     ; ADC Data Register Low Byte Bit 6
,,,       .equ   ADCL7   = 7     ; ADC Data Register Low Byte Bit 7
,,,       
,,,       ; SFIOR - Special Function IO Register
,,,       .equ   ADTS0   = 5     ; ADC Auto Trigger Source 0
,,,       .equ   ADTS1   = 6     ; ADC Auto Trigger Source 1
,,,       .equ   ADTS2   = 7     ; ADC Auto Trigger Source 2
,,,       
,,,       
,,,       ; ***** PORTA ************************
,,,       ; PORTA - Port A Data Register
,,,       .equ   PORTA0  = 0     ; Port A Data Register bit 0
,,,       .equ   PA0     = 0     ; For compatibility
,,,       .equ   PORTA1  = 1     ; Port A Data Register bit 1
,,,       .equ   PA1     = 1     ; For compatibility
,,,       .equ   PORTA2  = 2     ; Port A Data Register bit 2
,,,       .equ   PA2     = 2     ; For compatibility
,,,       .equ   PORTA3  = 3     ; Port A Data Register bit 3
,,,       .equ   PA3     = 3     ; For compatibility
,,,       .equ   PORTA4  = 4     ; Port A Data Register bit 4
,,,       .equ   PA4     = 4     ; For compatibility
,,,       .equ   PORTA5  = 5     ; Port A Data Register bit 5
,,,       .equ   PA5     = 5     ; For compatibility
,,,       .equ   PORTA6  = 6     ; Port A Data Register bit 6
,,,       .equ   PA6     = 6     ; For compatibility
,,,       .equ   PORTA7  = 7     ; Port A Data Register bit 7
,,,       .equ   PA7     = 7     ; For compatibility
,,,       
,,,       ; DDRA - Port A Data Direction Register
,,,       .equ   DDA0    = 0     ; Data Direction Register, Port A, bit 0
,,,       .equ   DDA1    = 1     ; Data Direction Register, Port A, bit 1
,,,       .equ   DDA2    = 2     ; Data Direction Register, Port A, bit 2
,,,       .equ   DDA3    = 3     ; Data Direction Register, Port A, bit 3
,,,       .equ   DDA4    = 4     ; Data Direction Register, Port A, bit 4
,,,       .equ   DDA5    = 5     ; Data Direction Register, Port A, bit 5
,,,       .equ   DDA6    = 6     ; Data Direction Register, Port A, bit 6
,,,       .equ   DDA7    = 7     ; Data Direction Register, Port A, bit 7
,,,       
,,,       ; PINA - Port A Input Pins
,,,       .equ   PINA0   = 0     ; Input Pins, Port A bit 0
,,,       .equ   PINA1   = 1     ; Input Pins, Port A bit 1
,,,       .equ   PINA2   = 2     ; Input Pins, Port A bit 2
,,,       .equ   PINA3   = 3     ; Input Pins, Port A bit 3
,,,       .equ   PINA4   = 4     ; Input Pins, Port A bit 4
,,,       .equ   PINA5   = 5     ; Input Pins, Port A bit 5
,,,       .equ   PINA6   = 6     ; Input Pins, Port A bit 6
,,,       .equ   PINA7   = 7     ; Input Pins, Port A bit 7
,,,       
,,,       
,,,       ; ***** PORTB ************************
,,,       ; PORTB - Port B Data Register
,,,       .equ   PORTB0  = 0     ; Port B Data Register bit 0
,,,       .equ   PB0     = 0     ; For compatibility
,,,       .equ   PORTB1  = 1     ; Port B Data Register bit 1
,,,       .equ   PB1     = 1     ; For compatibility
,,,       .equ   PORTB2  = 2     ; Port B Data Register bit 2
,,,       .equ   PB2     = 2     ; For compatibility
,,,       .equ   PORTB3  = 3     ; Port B Data Register bit 3
,,,       .equ   PB3     = 3     ; For compatibility
,,,       .equ   PORTB4  = 4     ; Port B Data Register bit 4
,,,       .equ   PB4     = 4     ; For compatibility
,,,       .equ   PORTB5  = 5     ; Port B Data Register bit 5
,,,       .equ   PB5     = 5     ; For compatibility
,,,       .equ   PORTB6  = 6     ; Port B Data Register bit 6
,,,       .equ   PB6     = 6     ; For compatibility
,,,       .equ   PORTB7  = 7     ; Port B Data Register bit 7
,,,       .equ   PB7     = 7     ; For compatibility
,,,       
,,,       ; DDRB - Port B Data Direction Register
,,,       .equ   DDB0    = 0     ; Port B Data Direction Register bit 0
,,,       .equ   DDB1    = 1     ; Port B Data Direction Register bit 1
,,,       .equ   DDB2    = 2     ; Port B Data Direction Register bit 2
,,,       .equ   DDB3    = 3     ; Port B Data Direction Register bit 3
,,,       .equ   DDB4    = 4     ; Port B Data Direction Register bit 4
,,,       .equ   DDB5    = 5     ; Port B Data Direction Register bit 5
,,,       .equ   DDB6    = 6     ; Port B Data Direction Register bit 6
,,,       .equ   DDB7    = 7     ; Port B Data Direction Register bit 7
,,,       
,,,       ; PINB - Port B Input Pins
,,,       .equ   PINB0   = 0     ; Port B Input Pins bit 0
,,,       .equ   PINB1   = 1     ; Port B Input Pins bit 1
,,,       .equ   PINB2   = 2     ; Port B Input Pins bit 2
,,,       .equ   PINB3   = 3     ; Port B Input Pins bit 3
,,,       .equ   PINB4   = 4     ; Port B Input Pins bit 4
,,,       .equ   PINB5   = 5     ; Port B Input Pins bit 5
,,,       .equ   PINB6   = 6     ; Port B Input Pins bit 6
,,,       .equ   PINB7   = 7     ; Port B Input Pins bit 7
,,,       
,,,       
,,,       ; ***** PORTC ************************
,,,       ; PORTC - Port C Data Register
,,,       .equ   PORTC0  = 0     ; Port C Data Register bit 0
,,,       .equ   PC0     = 0     ; For compatibility
,,,       .equ   PORTC1  = 1     ; Port C Data Register bit 1
,,,       .equ   PC1     = 1     ; For compatibility
,,,       .equ   PORTC2  = 2     ; Port C Data Register bit 2
,,,       .equ   PC2     = 2     ; For compatibility
,,,       .equ   PORTC3  = 3     ; Port C Data Register bit 3
,,,       .equ   PC3     = 3     ; For compatibility
,,,       .equ   PORTC4  = 4     ; Port C Data Register bit 4
,,,       .equ   PC4     = 4     ; For compatibility
,,,       .equ   PORTC5  = 5     ; Port C Data Register bit 5
,,,       .equ   PC5     = 5     ; For compatibility
,,,       .equ   PORTC6  = 6     ; Port C Data Register bit 6
,,,       .equ   PC6     = 6     ; For compatibility
,,,       .equ   PORTC7  = 7     ; Port C Data Register bit 7
,,,       .equ   PC7     = 7     ; For compatibility
,,,       
,,,       ; DDRC - Port C Data Direction Register
,,,       .equ   DDC0    = 0     ; Port C Data Direction Register bit 0
,,,       .equ   DDC1    = 1     ; Port C Data Direction Register bit 1
,,,       .equ   DDC2    = 2     ; Port C Data Direction Register bit 2
,,,       .equ   DDC3    = 3     ; Port C Data Direction Register bit 3
,,,       .equ   DDC4    = 4     ; Port C Data Direction Register bit 4
,,,       .equ   DDC5    = 5     ; Port C Data Direction Register bit 5
,,,       .equ   DDC6    = 6     ; Port C Data Direction Register bit 6
,,,       .equ   DDC7    = 7     ; Port C Data Direction Register bit 7
,,,       
,,,       ; PINC - Port C Input Pins
,,,       .equ   PINC0   = 0     ; Port C Input Pins bit 0
,,,       .equ   PINC1   = 1     ; Port C Input Pins bit 1
,,,       .equ   PINC2   = 2     ; Port C Input Pins bit 2
,,,       .equ   PINC3   = 3     ; Port C Input Pins bit 3
,,,       .equ   PINC4   = 4     ; Port C Input Pins bit 4
,,,       .equ   PINC5   = 5     ; Port C Input Pins bit 5
,,,       .equ   PINC6   = 6     ; Port C Input Pins bit 6
,,,       .equ   PINC7   = 7     ; Port C Input Pins bit 7
,,,       
,,,       
,,,       ; ***** PORTD ************************
,,,       ; PORTD - Port D Data Register
,,,       .equ   PORTD0  = 0     ; Port D Data Register bit 0
,,,       .equ   PD0     = 0     ; For compatibility
,,,       .equ   PORTD1  = 1     ; Port D Data Register bit 1
,,,       .equ   PD1     = 1     ; For compatibility
,,,       .equ   PORTD2  = 2     ; Port D Data Register bit 2
,,,       .equ   PD2     = 2     ; For compatibility
,,,       .equ   PORTD3  = 3     ; Port D Data Register bit 3
,,,       .equ   PD3     = 3     ; For compatibility
,,,       .equ   PORTD4  = 4     ; Port D Data Register bit 4
,,,       .equ   PD4     = 4     ; For compatibility
,,,       .equ   PORTD5  = 5     ; Port D Data Register bit 5
,,,       .equ   PD5     = 5     ; For compatibility
,,,       .equ   PORTD6  = 6     ; Port D Data Register bit 6
,,,       .equ   PD6     = 6     ; For compatibility
,,,       .equ   PORTD7  = 7     ; Port D Data Register bit 7
,,,       .equ   PD7     = 7     ; For compatibility
,,,       
,,,       ; DDRD - Port D Data Direction Register
,,,       .equ   DDD0    = 0     ; Port D Data Direction Register bit 0
,,,       .equ   DDD1    = 1     ; Port D Data Direction Register bit 1
,,,       .equ   DDD2    = 2     ; Port D Data Direction Register bit 2
,,,       .equ   DDD3    = 3     ; Port D Data Direction Register bit 3
,,,       .equ   DDD4    = 4     ; Port D Data Direction Register bit 4
,,,       .equ   DDD5    = 5     ; Port D Data Direction Register bit 5
,,,       .equ   DDD6    = 6     ; Port D Data Direction Register bit 6
,,,       .equ   DDD7    = 7     ; Port D Data Direction Register bit 7
,,,       
,,,       ; PIND - Port D Input Pins
,,,       .equ   PIND0   = 0     ; Port D Input Pins bit 0
,,,       .equ   PIND1   = 1     ; Port D Input Pins bit 1
,,,       .equ   PIND2   = 2     ; Port D Input Pins bit 2
,,,       .equ   PIND3   = 3     ; Port D Input Pins bit 3
,,,       .equ   PIND4   = 4     ; Port D Input Pins bit 4
,,,       .equ   PIND5   = 5     ; Port D Input Pins bit 5
,,,       .equ   PIND6   = 6     ; Port D Input Pins bit 6
,,,       .equ   PIND7   = 7     ; Port D Input Pins bit 7
,,,       
,,,       
,,,       ; ***** CPU **************************
,,,       ; SREG - Status Register
,,,       .equ   SREG_C  = 0     ; Carry Flag
,,,       .equ   SREG_Z  = 1     ; Zero Flag
,,,       .equ   SREG_N  = 2     ; Negative Flag
,,,       .equ   SREG_V  = 3     ; Two's Complement Overflow Flag
,,,       .equ   SREG_S  = 4     ; Sign Bit
,,,       .equ   SREG_H  = 5     ; Half Carry Flag
,,,       .equ   SREG_T  = 6     ; Bit Copy Storage
,,,       .equ   SREG_I  = 7     ; Global Interrupt Enable
,,,       
,,,       ; MCUCR - MCU Control Register
,,,       ;.equ  ISC00   = 0     ; Interrupt Sense Control 0 Bit 0
,,,       ;.equ  ISC01   = 1     ; Interrupt Sense Control 0 Bit 1
,,,       ;.equ  ISC10   = 2     ; Interrupt Sense Control 1 Bit 0
,,,       ;.equ  ISC11   = 3     ; Interrupt Sense Control 1 Bit 1
,,,       .equ   SM0     = 4     ; Sleep Mode Select
,,,       .equ   SM1     = 5     ; Sleep Mode Select
,,,       .equ   SM2     = 6     ; Sleep Mode Select
,,,       .equ   SE      = 7     ; Sleep Enable
,,,       
,,,       ; MCUCSR - MCU Control And Status Register
,,,       .equ   MCUSR   = MCUCSR        ; For compatibility
,,,       .equ   PORF    = 0     ; Power-on reset flag
,,,       .equ   EXTRF   = 1     ; External Reset Flag
,,,       .equ   BORF    = 2     ; Brown-out Reset Flag
,,,       .equ   WDRF    = 3     ; Watchdog Reset Flag
,,,       .equ   JTRF    = 4     ; JTAG Reset Flag
,,,       .equ   JTD     = 7     ; JTAG Interface Disable
,,,       
,,,       ; OSCCAL - Oscillator Calibration Value
,,,       .equ   CAL0    = 0     ; Oscillator Calibration Value Bit0
,,,       .equ   CAL1    = 1     ; Oscillator Calibration Value Bit1
,,,       .equ   CAL2    = 2     ; Oscillator Calibration Value Bit2
,,,       .equ   CAL3    = 3     ; Oscillator Calibration Value Bit3
,,,       .equ   CAL4    = 4     ; Oscillator Calibration Value Bit4
,,,       .equ   CAL5    = 5     ; Oscillator Calibration Value Bit5
,,,       .equ   CAL6    = 6     ; Oscillator Calibration Value Bit6
,,,       .equ   CAL7    = 7     ; Oscillator Calibration Value Bit7
,,,       
,,,       ; SFIOR - Special Function IO Register
,,,       .equ   PSR10   = 0     ; Prescaler Reset Timer/Counter1&0
,,,       .equ   PSR2    = 1     ; Prescaler Reset Timer/Counter2
,,,       .equ   PUD     = 2     ; Pull-up Disable
,,,       
,,,       
,,,       ; ***** BOOT_LOAD ********************
,,,       ; SPMCR - Store Program Memory Control Register
,,,       .equ   SPMEN   = 0     ; Store Program Memory Enable
,,,       .equ   PGERS   = 1     ; Page Erase
,,,       .equ   PGWRT   = 2     ; Page Write
,,,       .equ   BLBSET  = 3     ; Boot Lock Bit Set
,,,       .equ   RWWSRE  = 4     ; Read While Write secion read enable
,,,       .equ   ASRE    = RWWSRE        ; For compatibility
,,,       .equ   RWWSB   = 6     ; Read While Write Section Busy
,,,       .equ   ASB     = RWWSB ; For compatibility
,,,       .equ   SPMIE   = 7     ; SPM Interrupt Enable
,,,       
,,,       
,,,       ; ***** TWI **************************
,,,       ; TWBR - TWI Bit Rate register
,,,       .equ   TWBR0   = 0     ; 
,,,       .equ   TWBR1   = 1     ; 
,,,       .equ   TWBR2   = 2     ; 
,,,       .equ   TWBR3   = 3     ; 
,,,       .equ   TWBR4   = 4     ; 
,,,       .equ   TWBR5   = 5     ; 
,,,       .equ   TWBR6   = 6     ; 
,,,       .equ   TWBR7   = 7     ; 
,,,       
,,,       ; TWCR - TWI Control Register
,,,       .equ   TWIE    = 0     ; TWI Interrupt Enable
,,,       .equ   TWEN    = 2     ; TWI Enable Bit
,,,       .equ   TWWC    = 3     ; TWI Write Collition Flag
,,,       .equ   TWSTO   = 4     ; TWI Stop Condition Bit
,,,       .equ   TWSTA   = 5     ; TWI Start Condition Bit
,,,       .equ   TWEA    = 6     ; TWI Enable Acknowledge Bit
,,,       .equ   TWINT   = 7     ; TWI Interrupt Flag
,,,       
,,,       ; TWSR - TWI Status Register
,,,       .equ   TWPS0   = 0     ; TWI Prescaler bits
,,,       .equ   TWPS1   = 1     ; TWI Prescaler bits
,,,       .equ   TWS3    = 3     ; TWI Status
,,,       .equ   TWS4    = 4     ; TWI Status
,,,       .equ   TWS5    = 5     ; TWI Status
,,,       .equ   TWS6    = 6     ; TWI Status
,,,       .equ   TWS7    = 7     ; TWI Status
,,,       
,,,       ; TWDR - TWI Data register
,,,       .equ   TWD0    = 0     ; TWI Data Register Bit 0
,,,       .equ   TWD1    = 1     ; TWI Data Register Bit 1
,,,       .equ   TWD2    = 2     ; TWI Data Register Bit 2
,,,       .equ   TWD3    = 3     ; TWI Data Register Bit 3
,,,       .equ   TWD4    = 4     ; TWI Data Register Bit 4
,,,       .equ   TWD5    = 5     ; TWI Data Register Bit 5
,,,       .equ   TWD6    = 6     ; TWI Data Register Bit 6
,,,       .equ   TWD7    = 7     ; TWI Data Register Bit 7
,,,       
,,,       ; TWAR - TWI (Slave) Address register
,,,       .equ   TWGCE   = 0     ; TWI General Call Recognition Enable Bit
,,,       .equ   TWA0    = 1     ; TWI (Slave) Address register Bit 0
,,,       .equ   TWA1    = 2     ; TWI (Slave) Address register Bit 1
,,,       .equ   TWA2    = 3     ; TWI (Slave) Address register Bit 2
,,,       .equ   TWA3    = 4     ; TWI (Slave) Address register Bit 3
,,,       .equ   TWA4    = 5     ; TWI (Slave) Address register Bit 4
,,,       .equ   TWA5    = 6     ; TWI (Slave) Address register Bit 5
,,,       .equ   TWA6    = 7     ; TWI (Slave) Address register Bit 6
,,,       
,,,       
,,,       
,,,       ; ***** LOCKSBITS ********************************************************
,,,       .equ   LB1     = 0     ; Lock bit
,,,       .equ   LB2     = 1     ; Lock bit
,,,       .equ   BLB01   = 2     ; Boot Lock bit
,,,       .equ   BLB02   = 3     ; Boot Lock bit
,,,       .equ   BLB11   = 4     ; Boot lock bit
,,,       .equ   BLB12   = 5     ; Boot lock bit
,,,       
,,,       
,,,       ; ***** FUSES ************************************************************
,,,       ; LOW fuse bits
,,,       .equ   CKSEL0  = 0     ; Select Clock Source
,,,       .equ   CKSEL1  = 1     ; Select Clock Source
,,,       .equ   CKSEL2  = 2     ; Select Clock Source
,,,       .equ   CKSEL3  = 3     ; Select Clock Source
,,,       .equ   BODEN   = 6     ; Brown out detector enable
,,,       .equ   BODLEVEL        = 7     ; Brown out detector trigger level
,,,       
,,,       ; HIGH fuse bits
,,,       .equ   BOOTRST = 0     ; Select Reset Vector
,,,       .equ   BOOTSZ0 = 1     ; Select Boot Size
,,,       .equ   BOOTSZ1 = 2     ; Select Boot Size
,,,       .equ   EESAVE  = 3     ; EEPROM memory is preserved through chip erase
,,,       .equ   SPIEN   = 5     ; Enable Serial programming and Data Downloading
,,,       .equ   JTAGEN  = 6     ; Enable JTAG
,,,       .equ   OCDEN   = 7     ; Enable OCD
,,,       
,,,       
,,,       
,,,       ; ***** CPU REGISTER DEFINITIONS *****************************************
,,,       .def   XH      = r27
,,,       .def   XL      = r26
,,,       .def   YH      = r29
,,,       .def   YL      = r28
,,,       .def   ZH      = r31
,,,       .def   ZL      = r30
,,,       
,,,       
,,,       
,,,       ; ***** DATA MEMORY DECLARATIONS *****************************************
,,,       .equ   FLASHEND        = 0x3fff        ; Note: Word address
,,,       .equ   IOEND   = 0x003f
,,,       .equ   SRAM_START      = 0x0060
,,,       .equ   SRAM_SIZE       = 2048
,,,       .equ   RAMEND  = 0x085f
,,,       .equ   XRAMEND = 0x0000
,,,       .equ   E2END   = 0x03ff
,,,       .equ   EEPROMEND       = 0x03ff
,,,       .equ   EEADRBITS       = 10
,,,       #pragma AVRPART MEMORY PROG_FLASH 32768
,,,       #pragma AVRPART MEMORY EEPROM 1024
,,,       #pragma AVRPART MEMORY INT_SRAM SIZE 2048
,,,       #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
,,,       
,,,       
,,,       
,,,       ; ***** BOOTLOADER DECLARATIONS ******************************************
,,,       .equ   NRWW_START_ADDR = 0x3800
,,,       .equ   NRWW_STOP_ADDR  = 0x3fff
,,,       .equ   RWW_START_ADDR  = 0x0
,,,       .equ   RWW_STOP_ADDR   = 0x37ff
,,,       .equ   PAGESIZE        = 64
,,,       .equ   FIRSTBOOTSTART  = 0x3f00
,,,       .equ   SECONDBOOTSTART = 0x3e00
,,,       .equ   THIRDBOOTSTART  = 0x3c00
,,,       .equ   FOURTHBOOTSTART = 0x3800
,,,       .equ   SMALLBOOTSTART  = FIRSTBOOTSTART
,,,       .equ   LARGEBOOTSTART  = FOURTHBOOTSTART
,,,       
,,,       
,,,       
,,,       ; ***** INTERRUPT VECTORS ************************************************
,,,       .equ   INT0addr        = 0x0002        ; External Interrupt Request 0
,,,       .equ   INT1addr        = 0x0004        ; External Interrupt Request 1
,,,       .equ   INT2addr        = 0x0006        ; External Interrupt Request 2
,,,       .equ   OC2addr = 0x0008        ; Timer/Counter2 Compare Match
,,,       .equ   OVF2addr        = 0x000a        ; Timer/Counter2 Overflow
,,,       .equ   ICP1addr        = 0x000c        ; Timer/Counter1 Capture Event
,,,       .equ   OC1Aaddr        = 0x000e        ; Timer/Counter1 Compare Match A
,,,       .equ   OC1Baddr        = 0x0010        ; Timer/Counter1 Compare Match B
,,,       .equ   OVF1addr        = 0x0012        ; Timer/Counter1 Overflow
,,,       .equ   OC0addr = 0x0014        ; Timer/Counter0 Compare Match
,,,       .equ   OVF0addr        = 0x0016        ; Timer/Counter0 Overflow
,,,       .equ   SPIaddr = 0x0018        ; Serial Transfer Complete
,,,       .equ   URXCaddr        = 0x001a        ; USART, Rx Complete
,,,       .equ   UDREaddr        = 0x001c        ; USART Data Register Empty
,,,       .equ   UTXCaddr        = 0x001e        ; USART, Tx Complete
,,,       .equ   ADCCaddr        = 0x0020        ; ADC Conversion Complete
,,,       .equ   ERDYaddr        = 0x0022        ; EEPROM Ready
,,,       .equ   ACIaddr = 0x0024        ; Analog Comparator
,,,       .equ   TWIaddr = 0x0026        ; 2-wire Serial Interface
,,,       .equ   SPMRaddr        = 0x0028        ; Store Program Memory Ready
,,,       
,,,       .equ   INT_VECTORS_SIZE        = 42    ; size in words
,,,       
,,,       #endif  /* _M32DEF_INC_ */
,,,       
,,,       
,,,       .equ  LCD_RS=0
,,,       .equ  LCD_RW=1
,,,       .equ  LCD_EN=2
,,,       
,,,       .def  temp =   r16       ;временный регистр
,,,       .def  temp1 =  r17       ;временный регистр1
,,,       .def  temp2=  r18       ;временный регистр2
,,,       .def  temp3=  r19       ;временный регистр3
,,,       .def  lower =   r20
,,,       .def  upper =  r21
,,,       .def  count=r22           ;счётчик
,,,       .def  number=r23        ;номер датчика 
,,,       .def    Thousands =r2
,,,       .def    Hundreds =r3
,,,       .def    Tens =r4
,,,       .def    Ones =r5
,,,       
,,,       .dseg
0000C0,000D,,     Digit:     .byte 4
,,,       .cseg
,,,       .org  0x00
000000,C01D,,     rjmp Init ; Reset vector
000002,9518,,       reti ; Int vector 1
000004,9518,,       reti ; Int vector 2
000006,9518,,       reti ; Int vector 3
000008,9518,,       reti ; Int vector 4
00000A,9518,,       reti ; Int vector 5
00000C,9518,,       reti ; Int vector 6
00000E,9518,,       reti ; Int vector 7
000010,9518,,                reti  ; Int vector 8
,,,       .org 0x12
000024,C05E,,     rjmp  T1_OV_ISR ; Int vector 9
000026,9518,,       reti ; Int vector 10
000028,9518,,       reti ; Int vector 11
00002A,9518,,       reti ; Int vector 12
00002C,9518,,       reti ; Int vector 13
00002E,9518,,       reti ; Int vector 14
000030,9518,,       reti ; Int vector 15
000032,9518,,       reti ; Int vector 16
000034,9518,,       reti ; Int vector 17
000036,9518,,       reti ; Int vector 18
000038,9518,,       reti ; Int vector 19
00003A,9518,,       reti ; Int vector 20
,,,       
,,,       Init:
00003C,E008,,  ldi temp,high(RAMEND) ; Main program start
00003E,BF0E,,  out SPH,temp ; Set stack pointer to top of RAM
000040,E50F,,  ldi temp,low(RAMEND)
000042,BF0D,,  out SPL,temp
000044,EF0F,,  ldi temp,0xFF
000046,BB04,,  out  DDRC,temp                   ;на  выход
000048,BB07,,  out  DDRB,temp                   ;на  выход
00004A,E371,,  ldi number,0b00110001       ;инициализация номера датчика   
00004C,E031,,  ldi Temp3,0b00000001         ;инициализация индикатора
00004E,BB38,,  out PortB,Temp3       ;вывод в порт 
000050,EF00,,  ldi   temp,0xF0
000052,BD0D,,  out   TCNT1H,temp
000054,E00F,,   ldi   temp,0x0F
000056,BD0C,,  out   TCNT1L,temp
000058,2700,,  clr temp
00005A,BD0F,,  out   TCCR1A,temp
00005C,E005,,  ldi    temp,0x05        ;clk/1024
00005E,BD0E,,  out   TCCR1B,temp
000060,E000,,  ldi temp,0x00
000062,BB0A,,  out  DDRA,temp    
000064,E807,,  ldi temp,0x87
000066,B906,,  out  ADCSRA,temp
000068,EC00,,  ldi temp,0xC0
00006A,B907,,  out  ADMUX,temp
00006C,E004,,  ldi    temp,(1<<TOIE1)
00006E,BF09,,  out   TIMSK,temp
000070,9478,,  sei 
000072,D076,,  rcall  LCD_INIT                ;инициализация LCD
000074,D101,,  rcall Text_OUT                 ;выводимый текст
,,,         
,,,       Main: 
000076,9250,,  sts Digit  ,Ones    ;загрузка начальных сначений
00007A,9240,,  sts Digit+1,Tens
00007E,9230,,  sts Digit+2,Hundreds
000082,9220,,  sts Digit+3,Thousands
000086,D07D,,  rcall Display
000088,D001,,  rcall CONV_ADC
00008A,CFF5,,  rjmp  Main
,,,       ;********************************************************
,,,       ;Преобразование температуры
,,,       ;********************************************************
,,,       CONV_ADC:
00008C,9A36,,   sbi  ADCSRA,ADSC
,,,       CHECK_FLAG:
00008E,9B34,,   sbis  ADCSRA,ADIF
000090,CFFE,,   rjmp  CHECK_FLAG
000092,9A34,,   sbi   ADCSRA,ADIF
000094,B144,,   in    lower,ADCL
000096,B155,,   in    upper,ADCH
000098,3C48,,   cpi lower,0xC8
00009A,E000,,   ldi  temp,0x00
00009C,0750,,   cpc upper,temp
00009E,F448,,   brsh m8u                    ;перейти,если температура 0 или выше         
0000A0,E815,,   ldi  Temp1,0x85          ;получение температуры ниже 0
0000A2,D094,,   rcall LCD_command
0000A4,E21D,,   ldi temp1,'-'                 ;знак "-"
0000A6,D0AC,,   rcall  LCD_putchar
0000A8,5C49,,   subi  lower,0xC9                   
0000AA,4050,,   sbci  upper,0x00
0000AC,9550,,   com upper
0000AE,9540,,   com lower
0000B0,C006,,   rjmp  m8u_0
,,,       m8u:
0000B2,5C48,,   subi  lower,0xC8            ;получение температуры выше 0   
0000B4,4050,,   sbci  upper,0x00
0000B6,E815,,   ldi  Temp1,0x85             ;знак "+"
0000B8,D089,,   rcall LCD_command
0000BA,E21B,,   ldi temp1,'+'
0000BC,D0A1,,   rcall  LCD_putchar
,,,       m8u_0:                             ;умножение  
0000BE,E005,,   ldi  temp,5
0000C0,E069,,   ldi count,9
0000C2,9556,,   lsr  upper
0000C4,9547,,   ror lower
,,,       m8u_1:
0000C6,F408,,   brcc  m8u_2
0000C8,0F50,,   add   upper,temp
,,,       m8u_2:
0000CA,9557,,   ror upper
0000CC,9547,,   ror lower
0000CE,956A,,   dec  count
0000D0,F7D1,,   brne  m8u_1
0000D2,9A36,,   sbi  ADCSRA,ADSC
0000D4,354B,,   cpi lower,0x5B           ;вводим поправку 0.2 
0000D6,E004,,   ldi  temp,0x04           ;начиная с 111.5 градуса
0000D8,0750,,   cpc upper,temp
0000DA,F008,,   brlo End_0
0000DC,5042,,   subi lower,0x02
,,,       END_0:
0000DE,D011,,   rcall  DigitConvert
0000E0,9508,,   ret
,,,       ;**************************************************
,,,       ;Обработка прерывания
,,,       ;**************************************************
,,,       T1_OV_ISR:
0000E2,930F,,   push  temp
0000E4,3034,,   cpi Temp3,0b00000100        ;сравнить с крайним знач.
0000E6,F011,,   breq Init_0             ;если равно - загрузка нач. знач.
0000E8,0F33,,   lsl Temp3             ;иначе - сдвиг влево
0000EA,C002,,   rjmp Output           ;перейти на вывод в порт
,,,       
,,,       Init_0:   
0000EC,E031,,   ldi Temp3,0b00000001         ;загрузить нач. значение
0000EE,E370,,   ldi number,0b00110000        ;загрузить нач. значение номера датчика   
,,,       Output:  
0000F0,BB38,,   out PortB,Temp3       ;вывод в порт
0000F2,9573,,   inc  number
0000F4,6370,,   ori number,0x30
0000F6,EF05,,   ldi   temp,0xF5       ;загрузить счётчики таймера 
0000F8,BD0D,,   out  TCNT1H,Temp
0000FA,E00F,,   ldi   temp,0x0F
0000FC,BD0C,,   out  TCNT1L,Temp
0000FE,910F,,   pop  temp
000100,9518,,   reti
,,,       ;*****************************************************
,,,       ;Конвертирует 16-разр. число в 4 десятичных цифры 
,,,       ;******************************************************
,,,       DigitConvert:
000102,935F,,     push upper
000104,934F,,     push lower
000106,930F,,     push temp
000108,2422,,     clr    Thousands
00010A,2433,,     clr    Hundreds
00010C,2444,,     clr    Tens
00010E,2455,,     clr    Ones 
,,,       FindThousands:    
000110,9423,,     inc    Thousands  
000112,5E48,,     subi    lower,0xE8           ;находим сколько тысяч
000114,4053,,     sbci    upper,0x03
000116,F7E0,,     brcc    FindThousands   
000118,EE08,,     ldi    temp,0xE8          
00011A,0F40,,     add    lower,temp
00011C,E003,,     ldi    temp,0x03
00011E,1F50,,     adc    upper,temp      ;    
000120,942A,,     dec    Thousands 
,,,       
,,,       FindHundreds:  
000122,9433,,     inc    Hundreds  
000124,5644,,     subi    lower,100            ;;находим сколько сотен
000126,4050,,     sbci    upper,0
000128,F7E0,,     brcc    FindHundreds    
00012A,E604,,     ldi    temp,100            
00012C,0F40,,     add    lower,temp
00012E,E000,,     ldi    temp,0
000130,1F50,,     adc    upper,temp      ;    
000132,943A,,     dec    Hundreds             
,,,       
,,,       FindTens:
000134,9443,,     inc    Tens    
000136,504A,,     subi    lower,10             ;;находим сколько десятков
000138,4050,,     sbci    upper,0x00
00013A,F7E0,,     brcc    FindTens      
00013C,E00A,,     ldi       temp,10            
00013E,0F40,,     add    lower,temp
000140,E000,,     ldi       temp,0
000142,1F50,,     adc     upper,temp
000144,944A,,     dec     Tens
,,,       
,,,       FindOnes:
000146,9453,,     inc    Ones     
000148,5041,,     subi    lower,1            ;;находим сколько едениц
00014A,4050,,     sbci    upper,0
00014C,F7E0,,     brcc    FindOnes   
00014E,E001,,     ldi    temp,1            
000150,0F40,,     add    lower,temp
000152,E000,,     ldi    temp,0
000154,1F50,,     adc    upper,temp
000156,945A,,     dec    Ones  
000158,910F,,     pop temp
00015A,914F,,     pop lower
00015C,915F,,     pop upper         
00015E,9508,,     ret
,,,       ;***************** LCD **********************************
,,,       LCD_INIT:
000160,E313,,  ldi temp1,0x33             ;инициализация LCD в 4-bit способе.
000162,D034,,  rcall LCD_command       ;функция команд
000164,D072,,  rcall   DELAY_2ms          ;задержка инициализации
000166,E312,,  ldi temp1,0x32             ;инициализация LCD в 4-bit способе.
000168,D031,,  rcall LCD_command       ;функция команд
00016A,D06F,,  rcall   DELAY_2ms          ;задержка инициализации
00016C,E218,,  ldi temp1,0x28             ;инициализация LCD 4 бита, 2 строки, 5*7 точек
00016E,D02E,,  rcall LCD_command
000170,D06C,,  rcall   DELAY_2ms          ;задержка инициализации
000172,E01C,,  ldi temp1,0x0C             ;включен дисплей, курсор выключен
000174,D02B,,  rcall LCD_command           
000176,E011,,  ldi temp1,0x01             ;очистка дисплея
000178,D029,,  rcall LCD_command      
00017A,D067,,  rcall   DELAY_2ms          ;задержка для очистки дисплея   
00017C,E016,,  ldi temp1,0x06             ;перемещение курсора слева-направо инкр.
00017E,D026,,  rcall LCD_command
000180,9508,,  ret
,,,       ;******************************************************
,,,       Display:
000182,931F,,      push Temp1
000184,EC18,,      ldi  Temp1,0xC8          ;адрес установки курсора LCD для номера датчика
000186,D022,,      rcall LCD_command
000188,2F17,,      mov temp1,number     ;вывод номера датчика 
00018A,D03A,,      rcall  LCD_putchar
00018C,FD72,,      sbrc number,2             ;очистка после вывода номера 3
00018E,2777,,      clr number
000190,E81B,,      ldi  Temp1,0x8B           ;адрес установки курсора LCD для знаков
000192,D01C,,      rcall LCD_command
000194,ED1F,,      ldi temp1,0xDF           ;знак градуса
000196,D034,,      rcall  LCD_putchar
000198,E413,,      ldi temp1,'C'               ;знак Цельсия
00019A,D032,,      rcall  LCD_putchar
,,,       
00019C,E816,,     ldi Temp1,0x86            ;адрес установки курсора LCD
00019E,D016,,     rcall LCD_command     ;для вывода значения температуры
,,,         
0001A0,9110,,     lds Temp1,Digit+3        ;и .т.д
0001A4,D059,,     rcall Decoder
0001A6,D04A,,     rcall DELAY_100us
,,,       
0001A8,9110,,     lds Temp1,Digit+2        ;и .т.д
0001AC,D055,,     rcall Decoder
0001AE,D046,,     rcall DELAY_100us
,,,           
0001B0,9110,,     lds Temp1,Digit+1        ;и .т.д  
0001B4,D051,,     rcall Decoder
0001B6,D042,,     rcall DELAY_100us
,,,       
0001B8,E819,,     ldi  Temp1,0x89             ;вывод запятой
0001BA,D008,,     rcall LCD_command
0001BC,E21C,,     ldi temp1,','
0001BE,D020,,     rcall  LCD_putchar 
,,,          
0001C0,9110,,     lds Temp1,Digit
0001C4,D049,,     rcall Decoder
0001C6,D03A,,     rcall DELAY_100us
0001C8,911F,,     pop Temp1
0001CA,9508,,     ret
,,,       ;***********************************************
,,,       LCD_command:
0001CC,930F,,   push temp
0001CE,2F21,,   mov  temp2,temp1
0001D0,7F20,,   andi  temp2,0xF0
0001D2,B305,,   in   temp,PORTC
0001D4,700F,,   andi  temp,0x0F
0001D6,2B02,,   or     temp,temp2
0001D8,BB05,,   out   PORTC,temp
0001DA,98A8,,   cbi    PORTC,LCD_RS 
0001DC,98A9,,   cbi    PORTC,LCD_RW 
0001DE,9AAA,,   sbi    PORTC,LCD_EN
0001E0,D02A,,   rcall   SDELAY 
0001E2,98AA,,   cbi    PORTC,LCD_EN  
0001E4,D02B,,   rcall   DELAY_100us
,,,       
0001E6,2F21,,   mov  temp2,temp1
0001E8,9522,,   swap temp2
0001EA,7F20,,   andi  temp2,0xF0 
0001EC,B305,,   in   temp,PORTC
0001EE,700F,,   andi  temp,0x0F
0001F0,2B02,,   or     temp,temp2
0001F2,BB05,,   out   PORTC,temp
0001F4,9AAA,,   sbi    PORTC,LCD_EN
0001F6,D01F,,   rcall   SDELAY
0001F8,98AA,,   cbi    PORTC,LCD_EN
0001FA,D020,,   rcall   DELAY_100us 
0001FC,910F,,   pop temp
0001FE,9508,,   ret
,,,       ;****************************************
,,,       LCD_putchar:
000200,930F,,   push temp
000202,932F,,   push temp2
000204,2F21,,   mov  temp2,temp1
000206,7F20,,   andi  temp2,0xF0
000208,B305,,   in   temp,PORTC
00020A,700F,,   andi  temp,0x0F
00020C,2B02,,   or     temp,temp2
00020E,BB05,,   out   PORTC,temp
000210,9AA8,,   sbi    PORTC,LCD_RS 
000212,98A9,,   cbi    PORTC,LCD_RW 
000214,9AAA,,   sbi    PORTC,LCD_EN
000216,D00F,,   rcall   SDELAY 
000218,98AA,,   cbi    PORTC,LCD_EN  
,,,          
00021A,2F21,,   mov  temp2,temp1
00021C,9522,,   swap temp2 
00021E,7F20,,   andi  temp2,0xF0 
000220,B305,,   in   temp,PORTC
000222,700F,,   andi  temp,0x0F
000224,2B02,,   or     temp,temp2
000226,BB05,,   out   PORTC,temp
000228,9AAA,,   sbi    PORTC,LCD_EN
00022A,D005,,   rcall   SDELAY
00022C,98AA,,   cbi    PORTC,LCD_EN
00022E,D006,,   rcall   DELAY_100us 
000230,910F,,   pop temp
000232,912F,,   pop temp2
000234,9508,,   ret
,,,       ;****************************************
,,,       ;Задержки
,,,       ;****************************************
,,,       SDELAY:
000236,0000,,   nop
000238,0000,,   nop
00023A,9508,,   ret
,,,       DELAY_100us:
00023C,931F,,   push  temp1
00023E,E31C,,   ldi      temp1,60
,,,       DR0:
000240,DFFA,,   rcall     SDELAY
000242,951A,,   dec    temp1
000244,F7E9,,   brne  DR0
000246,911F,,   pop   temp1
000248,9508,,   ret
,,,       DELAY_2ms:
00024A,931F,,   push  temp1
00024C,E114,,   ldi      temp1,20
,,,       LDR0:
00024E,DFF6,,   rcall   DELAY_100us
000250,951A,,   dec    temp1
000252,F7E9,,   brne  LDR0
000254,911F,,   pop   temp1
000256,9508,,   ret
,,,       ;****************************************************
,,,       ; Выводимоё число
,,,       ;****************************************************
,,,       Decoder:
000258,931F,,  push  temp1
00025A,E6EE,,  ldi ZL,Low(DcMatrix*2)  
00025C,E0F2,,  ldi ZH,High(DcMatrix*2) 
00025E,E020,,  ldi Temp2,0            ;прибавление переменной
000260,0FE1,,  add ZL,Temp1        ;к 0-му адресу массива
000262,1FF2,,  adc ZH,Temp2
000264,95C8,,  lpm  
000266,2D10,,  mov Temp1,r0
000268,DFCB,,  rcall LCD_putchar
00026A,911F,,  pop   temp1
00026C,9508,,  ret 
,,,       
,,,       DcMatrix:
,,,0
,,,2
,,,4
,,,6
000276,3938,,.db '0','1','2','3','4','5','6','7','8','9'
,,,       ;****************************************************
,,,       ; Выводимый текст 1
,,,       ;****************************************************
,,,       Text_OUT:
000278,931F,,  push temp1
00027A,2766,,  clr  count
00027C,2711,,  clr temp1
00027E,E810,,  ldi Temp1,0x80                 ;адрес установки курсора
000280,DFA5,,  rcall LCD_command    
000282,EAE8,,  ldi ZL,Low(Text01*2) 
000284,E0F2,,  ldi ZH,High(Text01*2)
000286,E066,,  ldi count,6
000288,D00A,,  rcall  loop1
00028A,2766,,  clr  count 
00028C,2711,,  clr temp1
00028E,EC10,,  ldi Temp1,0xC0                ;адрес установки курсора
000290,DF9D,,  rcall LCD_command
000292,EAEE,,  ldi ZL,Low(Text02*2) 
000294,E0F2,,  ldi ZH,High(Text02*2)
000296,E068,,  ldi count,8
000298,D002,,  rcall  loop1
00029A,911F,,  pop temp1
00029C,9508,,   ret
,,,       loop1:
00029E,9115,,  lpm  temp1,Z+
0002A0,DFAF,,  rcall LCD_putchar
0002A2,956A,,  dec  count
0002A4,F7E1,,  brne  loop1
0002A6,9508,,  ret 
,,,       Text01:
,,,4
,,d,d
0002AC,003D,,.db  0x54,0x65,0x6D,0x70,0x3D,0
,,,       Text02:
,,,3
,,e,e
,,f,f
0002B4,3D73,,.db 0x53,0x65,0x6E,0x73,0x6F,0x72,0x73,0x3D
,,,
,,,
